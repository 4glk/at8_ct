
bin/Debug/at8_ct.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000019bc  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001e  00800060  000019bc  00001a70  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000043  0080007e  0080007e  00001a8e  2**0
                  ALLOC
  3 .fuse         00000002  00820000  00820000  00001a8e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         000033fc  00000000  00000000  00001a90  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      000012c6  00000000  00000000  00004e8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      00000011  00000000  00000000  00006152  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
       0:	44 c0       	rjmp	.+136    	; 0x8a <__ctors_end>
       2:	5e c0       	rjmp	.+188    	; 0xc0 <__bad_interrupt>
       4:	5d c0       	rjmp	.+186    	; 0xc0 <__bad_interrupt>
       6:	5c c0       	rjmp	.+184    	; 0xc0 <__bad_interrupt>
       8:	3c cb       	rjmp	.-2440   	; 0xfffff682 <__fuse+0xff7df682>
       a:	5a c0       	rjmp	.+180    	; 0xc0 <__bad_interrupt>
       c:	59 c0       	rjmp	.+178    	; 0xc0 <__bad_interrupt>
       e:	58 c0       	rjmp	.+176    	; 0xc0 <__bad_interrupt>
      10:	9e cb       	rjmp	.-2244   	; 0xfffff74e <__fuse+0xff7df74e>
      12:	88 cc       	rjmp	.-1776   	; 0xfffff924 <__fuse+0xff7df924>
      14:	55 c0       	rjmp	.+170    	; 0xc0 <__bad_interrupt>
      16:	54 c0       	rjmp	.+168    	; 0xc0 <__bad_interrupt>
      18:	53 c0       	rjmp	.+166    	; 0xc0 <__bad_interrupt>
      1a:	52 c0       	rjmp	.+164    	; 0xc0 <__bad_interrupt>
      1c:	52 c0       	rjmp	.+164    	; 0xc2 <__vector_14>
      1e:	50 c0       	rjmp	.+160    	; 0xc0 <__bad_interrupt>
      20:	4f c0       	rjmp	.+158    	; 0xc0 <__bad_interrupt>
      22:	4e c0       	rjmp	.+156    	; 0xc0 <__bad_interrupt>
      24:	4d c0       	rjmp	.+154    	; 0xc0 <__bad_interrupt>
      26:	84 c1       	rjmp	.+776    	; 0x330 <StateAutomate+0x92>
      28:	5f c1       	rjmp	.+702    	; 0x2e8 <StateAutomate+0x4a>
      2a:	64 c1       	rjmp	.+712    	; 0x2f4 <StateAutomate+0x56>
      2c:	69 c1       	rjmp	.+722    	; 0x300 <StateAutomate+0x62>
      2e:	6e c1       	rjmp	.+732    	; 0x30c <StateAutomate+0x6e>
      30:	73 c1       	rjmp	.+742    	; 0x318 <StateAutomate+0x7a>
      32:	7e c1       	rjmp	.+764    	; 0x330 <StateAutomate+0x92>
      34:	7d c1       	rjmp	.+762    	; 0x330 <StateAutomate+0x92>
      36:	7c c1       	rjmp	.+760    	; 0x330 <StateAutomate+0x92>
      38:	7b c1       	rjmp	.+758    	; 0x330 <StateAutomate+0x92>
      3a:	7a c1       	rjmp	.+756    	; 0x330 <StateAutomate+0x92>
      3c:	73 c1       	rjmp	.+742    	; 0x324 <StateAutomate+0x86>
      3e:	78 c1       	rjmp	.+752    	; 0x330 <StateAutomate+0x92>
      40:	77 c1       	rjmp	.+750    	; 0x330 <StateAutomate+0x92>

00000042 <number>:
      42:	3f 00 06 01 5b 02 4f 03 66 04 6d 05 7d 06 07 07     ?...[.O.f.m.}...
      52:	7f 08 6f 09 00 0a 40 0b 00 20 08 5f 77 41 7c 42     ..o...@.. ._wA|B
      62:	39 43 5e 44 79 45 71 46 31 47 76 48 3f 4f 73 50     9C^DyEqF1GvH?OsP
      72:	78 54 6e 55 7f 56 6e 59                             xTnU.VnY

0000007a <digit>:
      7a:	07 06 05 04 03 02 01 00 08 09 0a 0b 0c 0d 0e 0f     ................

0000008a <__ctors_end>:
      8a:	11 24       	eor	r1, r1
      8c:	1f be       	out	0x3f, r1	; 63
      8e:	cf e5       	ldi	r28, 0x5F	; 95
      90:	d4 e0       	ldi	r29, 0x04	; 4
      92:	de bf       	out	0x3e, r29	; 62
      94:	cd bf       	out	0x3d, r28	; 61

00000096 <__do_copy_data>:
      96:	10 e0       	ldi	r17, 0x00	; 0
      98:	a0 e6       	ldi	r26, 0x60	; 96
      9a:	b0 e0       	ldi	r27, 0x00	; 0
      9c:	ec eb       	ldi	r30, 0xBC	; 188
      9e:	f9 e1       	ldi	r31, 0x19	; 25
      a0:	02 c0       	rjmp	.+4      	; 0xa6 <__do_copy_data+0x10>
      a2:	05 90       	lpm	r0, Z+
      a4:	0d 92       	st	X+, r0
      a6:	ae 37       	cpi	r26, 0x7E	; 126
      a8:	b1 07       	cpc	r27, r17
      aa:	d9 f7       	brne	.-10     	; 0xa2 <__do_copy_data+0xc>

000000ac <__do_clear_bss>:
      ac:	10 e0       	ldi	r17, 0x00	; 0
      ae:	ae e7       	ldi	r26, 0x7E	; 126
      b0:	b0 e0       	ldi	r27, 0x00	; 0
      b2:	01 c0       	rjmp	.+2      	; 0xb6 <.do_clear_bss_start>

000000b4 <.do_clear_bss_loop>:
      b4:	1d 92       	st	X+, r1

000000b6 <.do_clear_bss_start>:
      b6:	a1 3c       	cpi	r26, 0xC1	; 193
      b8:	b1 07       	cpc	r27, r17
      ba:	e1 f7       	brne	.-8      	; 0xb4 <.do_clear_bss_loop>
      bc:	0f d8       	rcall	.-4066   	; 0xfffff0dc <__fuse+0xff7df0dc>
      be:	7c cc       	rjmp	.-1800   	; 0xfffff9b8 <__fuse+0xff7df9b8>

000000c0 <__bad_interrupt>:
      c0:	9f cf       	rjmp	.-194    	; 0x0 <__vectors>

000000c2 <__vector_14>:
#include "adc.h"

ISR (ADC_vect){
      c2:	1f 92       	push	r1
      c4:	0f 92       	push	r0
      c6:	00 90 5f 00 	lds	r0, 0x005F
      ca:	0f 92       	push	r0
      cc:	11 24       	eor	r1, r1
      ce:	2f 93       	push	r18
      d0:	3f 93       	push	r19
      d2:	4f 93       	push	r20
      d4:	5f 93       	push	r21
      d6:	6f 93       	push	r22
      d8:	7f 93       	push	r23
      da:	8f 93       	push	r24
      dc:	9f 93       	push	r25
      de:	af 93       	push	r26
      e0:	bf 93       	push	r27
      e2:	ef 93       	push	r30
      e4:	ff 93       	push	r31
      e6:	cf 93       	push	r28
      e8:	df 93       	push	r29
      ea:	cd b7       	in	r28, 0x3d	; 61
      ec:	de b7       	in	r29, 0x3e	; 62
    AddTask(AdcMean,100);   //отошлю в диспетчер гы гы , главное чтоб он успевал отработать , до того как новое придет
      ee:	64 e6       	ldi	r22, 0x64	; 100
      f0:	70 e0       	ldi	r23, 0x00	; 0
      f2:	80 e9       	ldi	r24, 0x90	; 144
      f4:	90 e0       	ldi	r25, 0x00	; 0
      f6:	58 d8       	rcall	.-3920   	; 0xfffff1a8 <__fuse+0xff7df1a8>
   // AdcMean();  //медленный диспетчер может засраться (
}
      f8:	df 91       	pop	r29
      fa:	cf 91       	pop	r28
      fc:	ff 91       	pop	r31
      fe:	ef 91       	pop	r30
     100:	bf 91       	pop	r27
     102:	af 91       	pop	r26
     104:	9f 91       	pop	r25
     106:	8f 91       	pop	r24
     108:	7f 91       	pop	r23
     10a:	6f 91       	pop	r22
     10c:	5f 91       	pop	r21
     10e:	4f 91       	pop	r20
     110:	3f 91       	pop	r19
     112:	2f 91       	pop	r18
     114:	0f 90       	pop	r0
     116:	00 92 5f 00 	sts	0x005F, r0
     11a:	0f 90       	pop	r0
     11c:	1f 90       	pop	r1
     11e:	18 95       	reti

00000120 <AdcMean>:

void AdcMean(){
     120:	cf 93       	push	r28
     122:	df 93       	push	r29
     124:	cd b7       	in	r28, 0x3d	; 61
     126:	de b7       	in	r29, 0x3e	; 62
    static uint8_t counti = 0;
        ADCSRA|=(1<<ADSC);
     128:	86 e2       	ldi	r24, 0x26	; 38
     12a:	90 e0       	ldi	r25, 0x00	; 0
     12c:	26 e2       	ldi	r18, 0x26	; 38
     12e:	30 e0       	ldi	r19, 0x00	; 0
     130:	f9 01       	movw	r30, r18
     132:	20 81       	ld	r18, Z
     134:	20 64       	ori	r18, 0x40	; 64
     136:	fc 01       	movw	r30, r24
     138:	20 83       	st	Z, r18
      if (counti!=0) adc_buf+=ADCW; //опять костыли (((
     13a:	80 91 7e 00 	lds	r24, 0x007E
     13e:	88 23       	and	r24, r24
     140:	79 f0       	breq	.+30     	; 0x160 <AdcMean+0x40>
     142:	84 e2       	ldi	r24, 0x24	; 36
     144:	90 e0       	ldi	r25, 0x00	; 0
     146:	fc 01       	movw	r30, r24
     148:	20 81       	ld	r18, Z
     14a:	31 81       	ldd	r19, Z+1	; 0x01
     14c:	80 91 8c 00 	lds	r24, 0x008C
     150:	90 91 8d 00 	lds	r25, 0x008D
     154:	82 0f       	add	r24, r18
     156:	93 1f       	adc	r25, r19
     158:	90 93 8d 00 	sts	0x008D, r25
     15c:	80 93 8c 00 	sts	0x008C, r24
      counti++;
     160:	80 91 7e 00 	lds	r24, 0x007E
     164:	8f 5f       	subi	r24, 0xFF	; 255
     166:	80 93 7e 00 	sts	0x007E, r24
    if (counti == 9){
     16a:	80 91 7e 00 	lds	r24, 0x007E
     16e:	89 30       	cpi	r24, 0x09	; 9
     170:	09 f0       	breq	.+2      	; 0x174 <AdcMean+0x54>
     172:	55 c0       	rjmp	.+170    	; 0x21e <AdcMean+0xfe>
        adc_result = (adc_buf>>3);
     174:	80 91 8c 00 	lds	r24, 0x008C
     178:	90 91 8d 00 	lds	r25, 0x008D
     17c:	96 95       	lsr	r25
     17e:	87 95       	ror	r24
     180:	96 95       	lsr	r25
     182:	87 95       	ror	r24
     184:	96 95       	lsr	r25
     186:	87 95       	ror	r24
     188:	90 93 87 00 	sts	0x0087, r25
     18c:	80 93 86 00 	sts	0x0086, r24
        adc_buf = 0;
     190:	10 92 8d 00 	sts	0x008D, r1
     194:	10 92 8c 00 	sts	0x008C, r1
        counti = 0;
     198:	10 92 7e 00 	sts	0x007E, r1
        if (ADMUX==6){
     19c:	87 e2       	ldi	r24, 0x27	; 39
     19e:	90 e0       	ldi	r25, 0x00	; 0
     1a0:	fc 01       	movw	r30, r24
     1a2:	80 81       	ld	r24, Z
     1a4:	86 30       	cpi	r24, 0x06	; 6
     1a6:	f1 f4       	brne	.+60     	; 0x1e4 <AdcMean+0xc4>
            if (adc6!=adc_result){
     1a8:	20 91 88 00 	lds	r18, 0x0088
     1ac:	30 91 89 00 	lds	r19, 0x0089
     1b0:	80 91 86 00 	lds	r24, 0x0086
     1b4:	90 91 87 00 	lds	r25, 0x0087
     1b8:	28 17       	cp	r18, r24
     1ba:	39 07       	cpc	r19, r25
     1bc:	69 f0       	breq	.+26     	; 0x1d8 <AdcMean+0xb8>
            adc6=adc_result;
     1be:	80 91 86 00 	lds	r24, 0x0086
     1c2:	90 91 87 00 	lds	r25, 0x0087
     1c6:	90 93 89 00 	sts	0x0089, r25
     1ca:	80 93 88 00 	sts	0x0088, r24
         //   TimeStop=adc6;
            AddTask(ShowAdc6,50);}
     1ce:	62 e3       	ldi	r22, 0x32	; 50
     1d0:	70 e0       	ldi	r23, 0x00	; 0
     1d2:	83 ee       	ldi	r24, 0xE3	; 227
     1d4:	92 e0       	ldi	r25, 0x02	; 2
     1d6:	e8 d7       	rcall	.+4048   	; 0x11a8 <AddTask>
            ADMUX=7;
     1d8:	87 e2       	ldi	r24, 0x27	; 39
     1da:	90 e0       	ldi	r25, 0x00	; 0
     1dc:	27 e0       	ldi	r18, 0x07	; 7
     1de:	fc 01       	movw	r30, r24
     1e0:	20 83       	st	Z, r18
     1e2:	1d c0       	rjmp	.+58     	; 0x21e <AdcMean+0xfe>
        }
        else {
           // adc7=adc_result*10;
            if (adc7!=adc_result){
     1e4:	20 91 8a 00 	lds	r18, 0x008A
     1e8:	30 91 8b 00 	lds	r19, 0x008B
     1ec:	80 91 86 00 	lds	r24, 0x0086
     1f0:	90 91 87 00 	lds	r25, 0x0087
     1f4:	28 17       	cp	r18, r24
     1f6:	39 07       	cpc	r19, r25
     1f8:	69 f0       	breq	.+26     	; 0x214 <AdcMean+0xf4>
                adc7=adc_result;
     1fa:	80 91 86 00 	lds	r24, 0x0086
     1fe:	90 91 87 00 	lds	r25, 0x0087
     202:	90 93 8b 00 	sts	0x008B, r25
     206:	80 93 8a 00 	sts	0x008A, r24
             //   TimeSupply=adc7;
                AddTask(ShowAdc7,50);}
     20a:	62 e3       	ldi	r22, 0x32	; 50
     20c:	70 e0       	ldi	r23, 0x00	; 0
     20e:	85 ef       	ldi	r24, 0xF5	; 245
     210:	92 e0       	ldi	r25, 0x02	; 2
     212:	ca d7       	rcall	.+3988   	; 0x11a8 <AddTask>
                ADMUX=6;
     214:	87 e2       	ldi	r24, 0x27	; 39
     216:	90 e0       	ldi	r25, 0x00	; 0
     218:	26 e0       	ldi	r18, 0x06	; 6
     21a:	fc 01       	movw	r30, r24
     21c:	20 83       	st	Z, r18
        }
    }  //  AddTask(AdcMean,100);
}
     21e:	df 91       	pop	r29
     220:	cf 91       	pop	r28
     222:	08 95       	ret

00000224 <InitADC>:



void InitADC(){
     224:	cf 93       	push	r28
     226:	df 93       	push	r29
     228:	cd b7       	in	r28, 0x3d	; 61
     22a:	de b7       	in	r29, 0x3e	; 62
//	cli();
	ADCSRA |=  (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0); // Set ADC prescalar
     22c:	86 e2       	ldi	r24, 0x26	; 38
     22e:	90 e0       	ldi	r25, 0x00	; 0
     230:	26 e2       	ldi	r18, 0x26	; 38
     232:	30 e0       	ldi	r19, 0x00	; 0
     234:	f9 01       	movw	r30, r18
     236:	20 81       	ld	r18, Z
     238:	27 60       	ori	r18, 0x07	; 7
     23a:	fc 01       	movw	r30, r24
     23c:	20 83       	st	Z, r18
	ADMUX  |= (0 << MUX3) | (1 << MUX2) | (1 << MUX1) | (0 << MUX0);    // adc6=ADCW;
     23e:	87 e2       	ldi	r24, 0x27	; 39
     240:	90 e0       	ldi	r25, 0x00	; 0
     242:	27 e2       	ldi	r18, 0x27	; 39
     244:	30 e0       	ldi	r19, 0x00	; 0
     246:	f9 01       	movw	r30, r18
     248:	20 81       	ld	r18, Z
     24a:	26 60       	ori	r18, 0x06	; 6
     24c:	fc 01       	movw	r30, r24
     24e:	20 83       	st	Z, r18
	ADMUX |= (1<<ADLAR)|(1 << REFS0)|(0<<REFS1); // Set ADC reference to AVCC
     250:	87 e2       	ldi	r24, 0x27	; 39
     252:	90 e0       	ldi	r25, 0x00	; 0
     254:	27 e2       	ldi	r18, 0x27	; 39
     256:	30 e0       	ldi	r19, 0x00	; 0
     258:	f9 01       	movw	r30, r18
     25a:	20 81       	ld	r18, Z
     25c:	20 66       	ori	r18, 0x60	; 96
     25e:	fc 01       	movw	r30, r24
     260:	20 83       	st	Z, r18
//   	ADCSRA |= (1 << ADFR);  // Set ADC to Free-Running Mode
   	ADCSRA |= (1 << ADEN);  // Enable ADC
     262:	86 e2       	ldi	r24, 0x26	; 38
     264:	90 e0       	ldi	r25, 0x00	; 0
     266:	26 e2       	ldi	r18, 0x26	; 38
     268:	30 e0       	ldi	r19, 0x00	; 0
     26a:	f9 01       	movw	r30, r18
     26c:	20 81       	ld	r18, Z
     26e:	20 68       	ori	r18, 0x80	; 128
     270:	fc 01       	movw	r30, r24
     272:	20 83       	st	Z, r18
   	ADCSRA |= (1 << ADSC);// Start A2D Conversions
     274:	86 e2       	ldi	r24, 0x26	; 38
     276:	90 e0       	ldi	r25, 0x00	; 0
     278:	26 e2       	ldi	r18, 0x26	; 38
     27a:	30 e0       	ldi	r19, 0x00	; 0
     27c:	f9 01       	movw	r30, r18
     27e:	20 81       	ld	r18, Z
     280:	20 64       	ori	r18, 0x40	; 64
     282:	fc 01       	movw	r30, r24
     284:	20 83       	st	Z, r18
	ADCSRA |= (1 << ADIE);//Бит 3 – ADIE (ADC Interrupt Enable) – бит разрешения прерывания аналого–цифрового преобразователя : 1 – разрешено, 0 – запрещено.
     286:	86 e2       	ldi	r24, 0x26	; 38
     288:	90 e0       	ldi	r25, 0x00	; 0
     28a:	26 e2       	ldi	r18, 0x26	; 38
     28c:	30 e0       	ldi	r19, 0x00	; 0
     28e:	f9 01       	movw	r30, r18
     290:	20 81       	ld	r18, Z
     292:	28 60       	ori	r18, 0x08	; 8
     294:	fc 01       	movw	r30, r24
     296:	20 83       	st	Z, r18
//	sei();
}
     298:	df 91       	pop	r29
     29a:	cf 91       	pop	r28
     29c:	08 95       	ret

0000029e <StateAutomate>:
#include "automate.h"

//TODO: переключатель по таймеру , обнуление счетчиков при остановке, блокировка ручного управления и наоборот
void StateAutomate(){
     29e:	cf 93       	push	r28
     2a0:	df 93       	push	r29
     2a2:	cd b7       	in	r28, 0x3d	; 61
     2a4:	de b7       	in	r29, 0x3e	; 62

    if (flags.State_Automate==1){
     2a6:	80 91 90 00 	lds	r24, 0x0090
     2aa:	81 70       	andi	r24, 0x01	; 1
     2ac:	88 23       	and	r24, r24
     2ae:	09 f4       	brne	.+2      	; 0x2b2 <StateAutomate+0x14>
     2b0:	40 c0       	rjmp	.+128    	; 0x332 <StateAutomate+0x94>
                flags.State_Automate=0;
     2b2:	80 91 90 00 	lds	r24, 0x0090
     2b6:	8e 7f       	andi	r24, 0xFE	; 254
     2b8:	80 93 90 00 	sts	0x0090, r24
    switch (KeyCurrentCode){
     2bc:	80 91 bf 00 	lds	r24, 0x00BF
     2c0:	90 91 c0 00 	lds	r25, 0x00C0
     2c4:	aa 27       	eor	r26, r26
     2c6:	97 fd       	sbrc	r25, 7
     2c8:	a0 95       	com	r26
     2ca:	ba 2f       	mov	r27, r26
     2cc:	40 e0       	ldi	r20, 0x00	; 0
     2ce:	50 e0       	ldi	r21, 0x00	; 0
     2d0:	2d e0       	ldi	r18, 0x0D	; 13
     2d2:	30 e0       	ldi	r19, 0x00	; 0
     2d4:	84 1b       	sub	r24, r20
     2d6:	95 0b       	sbc	r25, r21
     2d8:	28 17       	cp	r18, r24
     2da:	39 07       	cpc	r19, r25
     2dc:	48 f1       	brcs	.+82     	; 0x330 <StateAutomate+0x92>
     2de:	8d 5e       	subi	r24, 0xED	; 237
     2e0:	9f 4f       	sbci	r25, 0xFF	; 255
     2e2:	8f 93       	push	r24
     2e4:	9f 93       	push	r25
     2e6:	08 95       	ret
        case 0:break;
        case 1: AddTask(Supply_sw,100);break;     //3 кнопка подачи
     2e8:	64 e6       	ldi	r22, 0x64	; 100
     2ea:	70 e0       	ldi	r23, 0x00	; 0
     2ec:	86 e1       	ldi	r24, 0x16	; 22
     2ee:	92 e0       	ldi	r25, 0x02	; 2
     2f0:	5b d7       	rcall	.+3766   	; 0x11a8 <AddTask>
     2f2:	1f c0       	rjmp	.+62     	; 0x332 <StateAutomate+0x94>
        case 2: AddTask(Fire_sw,100); break;     //4 кнопка горелки
     2f4:	64 e6       	ldi	r22, 0x64	; 100
     2f6:	70 e0       	ldi	r23, 0x00	; 0
     2f8:	81 eb       	ldi	r24, 0xB1	; 177
     2fa:	92 e0       	ldi	r25, 0x02	; 2
     2fc:	55 d7       	rcall	.+3754   	; 0x11a8 <AddTask>
     2fe:	19 c0       	rjmp	.+50     	; 0x332 <StateAutomate+0x94>
        case 3: AddTask(Timer_sw,100);
     300:	64 e6       	ldi	r22, 0x64	; 100
     302:	70 e0       	ldi	r23, 0x00	; 0
     304:	81 ea       	ldi	r24, 0xA1	; 161
     306:	91 e0       	ldi	r25, 0x01	; 1
     308:	4f d7       	rcall	.+3742   	; 0x11a8 <AddTask>
                break;     //1 кнопка старт/стоп счетчика
     30a:	13 c0       	rjmp	.+38     	; 0x332 <StateAutomate+0x94>
        case 4: AddTask(Furnance_sw,100);break;     //5 кнопка трубы
     30c:	64 e6       	ldi	r22, 0x64	; 100
     30e:	70 e0       	ldi	r23, 0x00	; 0
     310:	8f e7       	ldi	r24, 0x7F	; 127
     312:	92 e0       	ldi	r25, 0x02	; 2
     314:	49 d7       	rcall	.+3730   	; 0x11a8 <AddTask>
     316:	0d c0       	rjmp	.+26     	; 0x332 <StateAutomate+0x94>
        case 5: IND_OutputFormatChar("AVTO",0,1);
     318:	41 e0       	ldi	r20, 0x01	; 1
     31a:	60 e0       	ldi	r22, 0x00	; 0
     31c:	80 e6       	ldi	r24, 0x60	; 96
     31e:	90 e0       	ldi	r25, 0x00	; 0
     320:	89 d1       	rcall	.+786    	; 0x634 <IND_OutputFormatChar>
                break;     //2 кнопка авто вкл/выкл
     322:	07 c0       	rjmp	.+14     	; 0x332 <StateAutomate+0x94>
 //       case 8: IND_OutputFormat(55, 5,  5,  3);break;          //долгое нажатие нуля :)
        case 9: //ResetTask(FuncINDTime);
                break;     // 3
        case 10:// IND_OutputFormatChar("ECT",0,0);
                break;                        //4
        case 11: AddTask(Furnance_sw,250) ;
     324:	6a ef       	ldi	r22, 0xFA	; 250
     326:	70 e0       	ldi	r23, 0x00	; 0
     328:	8f e7       	ldi	r24, 0x7F	; 127
     32a:	92 e0       	ldi	r25, 0x02	; 2
     32c:	3d d7       	rcall	.+3706   	; 0x11a8 <AddTask>
                break;                        //1
     32e:	01 c0       	rjmp	.+2      	; 0x332 <StateAutomate+0x94>
        case 13:
                break;    //2
//        case 14: IND_OutputFormat(KeyCurrentCode, 5,  5,  3);break;    // не подключены кнопки
//        case 15: IND_OutputFormat(KeyCurrentCode, 5,  5,  3);break;    //------
//        case 16: IND_OutputFormat(KeyCurrentCode, 5,  5,  3);break;    //
        default:break;
     330:	00 00       	nop
    }
    }
    AddTask(StateAutomate,50);
     332:	62 e3       	ldi	r22, 0x32	; 50
     334:	70 e0       	ldi	r23, 0x00	; 0
     336:	8f e4       	ldi	r24, 0x4F	; 79
     338:	91 e0       	ldi	r25, 0x01	; 1
     33a:	36 d7       	rcall	.+3692   	; 0x11a8 <AddTask>
}
     33c:	df 91       	pop	r29
     33e:	cf 91       	pop	r28
     340:	08 95       	ret

00000342 <Timer_sw>:

void Timer_sw(){    // при нажатии проверить включена ли подача и обнулить таймеры если выключаем
     342:	cf 93       	push	r28
     344:	df 93       	push	r29
     346:	cd b7       	in	r28, 0x3d	; 61
     348:	de b7       	in	r29, 0x3e	; 62
                    AddTask(FuncINDTime,1500);
     34a:	6c ed       	ldi	r22, 0xDC	; 220
     34c:	75 e0       	ldi	r23, 0x05	; 5
     34e:	87 e6       	ldi	r24, 0x67	; 103
     350:	92 e0       	ldi	r25, 0x02	; 2
     352:	2a d7       	rcall	.+3668   	; 0x11a8 <AddTask>
                if (!flags.SupplyAuto){
     354:	80 91 91 00 	lds	r24, 0x0091
     358:	84 fb       	bst	r24, 4
     35a:	99 27       	eor	r25, r25
     35c:	90 f9       	bld	r25, 0
     35e:	81 e0       	ldi	r24, 0x01	; 1
     360:	89 27       	eor	r24, r25
     362:	88 23       	and	r24, r24
     364:	89 f1       	breq	.+98     	; 0x3c8 <Timer_sw+0x86>
                    IND_OutputFormatChar("CTAP",0,1);
     366:	41 e0       	ldi	r20, 0x01	; 1
     368:	60 e0       	ldi	r22, 0x00	; 0
     36a:	85 e6       	ldi	r24, 0x65	; 101
     36c:	90 e0       	ldi	r25, 0x00	; 0
     36e:	62 d1       	rcall	.+708    	; 0x634 <IND_OutputFormatChar>
                    flags.SupplyAuto=1;
     370:	80 91 91 00 	lds	r24, 0x0091
     374:	80 61       	ori	r24, 0x10	; 16
     376:	80 93 91 00 	sts	0x0091, r24
                  //  flags.SupplyManual=0;
                    flags.ADC_Channel=1;
     37a:	80 91 91 00 	lds	r24, 0x0091
     37e:	80 64       	ori	r24, 0x40	; 64
     380:	80 93 91 00 	sts	0x0091, r24
                    CurrentTime=adc7;
     384:	80 91 8a 00 	lds	r24, 0x008A
     388:	90 91 8b 00 	lds	r25, 0x008B
     38c:	90 93 85 00 	sts	0x0085, r25
     390:	80 93 84 00 	sts	0x0084, r24
                    TimeStop=adc6;
     394:	80 91 88 00 	lds	r24, 0x0088
     398:	90 91 89 00 	lds	r25, 0x0089
     39c:	90 93 81 00 	sts	0x0081, r25
     3a0:	80 93 80 00 	sts	0x0080, r24
                    TimeSupply=adc7;
     3a4:	80 91 8a 00 	lds	r24, 0x008A
     3a8:	90 91 8b 00 	lds	r25, 0x008B
     3ac:	90 93 83 00 	sts	0x0083, r25
     3b0:	80 93 82 00 	sts	0x0082, r24
                    SB(C,3);
     3b4:	85 e3       	ldi	r24, 0x35	; 53
     3b6:	90 e0       	ldi	r25, 0x00	; 0
     3b8:	25 e3       	ldi	r18, 0x35	; 53
     3ba:	30 e0       	ldi	r19, 0x00	; 0
     3bc:	f9 01       	movw	r30, r18
     3be:	20 81       	ld	r18, Z
     3c0:	28 60       	ori	r18, 0x08	; 8
     3c2:	fc 01       	movw	r30, r24
     3c4:	20 83       	st	Z, r18
     3c6:	2b c0       	rjmp	.+86     	; 0x41e <Timer_sw+0xdc>
                }else {
                    IND_OutputFormatChar("CTOP",0,1);
     3c8:	41 e0       	ldi	r20, 0x01	; 1
     3ca:	60 e0       	ldi	r22, 0x00	; 0
     3cc:	8a e6       	ldi	r24, 0x6A	; 106
     3ce:	90 e0       	ldi	r25, 0x00	; 0
     3d0:	31 d1       	rcall	.+610    	; 0x634 <IND_OutputFormatChar>
                    flags.SupplyAuto=0;
     3d2:	80 91 91 00 	lds	r24, 0x0091
     3d6:	8f 7e       	andi	r24, 0xEF	; 239
     3d8:	80 93 91 00 	sts	0x0091, r24
                    CB(C,3);
     3dc:	85 e3       	ldi	r24, 0x35	; 53
     3de:	90 e0       	ldi	r25, 0x00	; 0
     3e0:	25 e3       	ldi	r18, 0x35	; 53
     3e2:	30 e0       	ldi	r19, 0x00	; 0
     3e4:	f9 01       	movw	r30, r18
     3e6:	20 81       	ld	r18, Z
     3e8:	27 7f       	andi	r18, 0xF7	; 247
     3ea:	fc 01       	movw	r30, r24
     3ec:	20 83       	st	Z, r18
                    TimeStop=adc6;
     3ee:	80 91 88 00 	lds	r24, 0x0088
     3f2:	90 91 89 00 	lds	r25, 0x0089
     3f6:	90 93 81 00 	sts	0x0081, r25
     3fa:	80 93 80 00 	sts	0x0080, r24
                    TimeSupply=adc7;
     3fe:	80 91 8a 00 	lds	r24, 0x008A
     402:	90 91 8b 00 	lds	r25, 0x008B
     406:	90 93 83 00 	sts	0x0083, r25
     40a:	80 93 82 00 	sts	0x0082, r24
                    CurrentTime=adc7;
     40e:	80 91 8a 00 	lds	r24, 0x008A
     412:	90 91 8b 00 	lds	r25, 0x008B
     416:	90 93 85 00 	sts	0x0085, r25
     41a:	80 93 84 00 	sts	0x0084, r24
                }
                KeyCurrentCode=0;
     41e:	10 92 c0 00 	sts	0x00C0, r1
     422:	10 92 bf 00 	sts	0x00BF, r1
}
     426:	df 91       	pop	r29
     428:	cf 91       	pop	r28
     42a:	08 95       	ret

0000042c <Supply_sw>:

void Supply_sw(){
     42c:	cf 93       	push	r28
     42e:	df 93       	push	r29
     430:	cd b7       	in	r28, 0x3d	; 61
     432:	de b7       	in	r29, 0x3e	; 62
             AddTask(FuncINDTime,1500);
     434:	6c ed       	ldi	r22, 0xDC	; 220
     436:	75 e0       	ldi	r23, 0x05	; 5
     438:	87 e6       	ldi	r24, 0x67	; 103
     43a:	92 e0       	ldi	r25, 0x02	; 2
     43c:	b5 d6       	rcall	.+3434   	; 0x11a8 <AddTask>
            IND_OutputFormatChar(" POD",0,1);
     43e:	41 e0       	ldi	r20, 0x01	; 1
     440:	60 e0       	ldi	r22, 0x00	; 0
     442:	8f e6       	ldi	r24, 0x6F	; 111
     444:	90 e0       	ldi	r25, 0x00	; 0
     446:	f6 d0       	rcall	.+492    	; 0x634 <IND_OutputFormatChar>
            if (flags.SupplyAuto==1){
     448:	80 91 91 00 	lds	r24, 0x0091
     44c:	82 95       	swap	r24
     44e:	81 70       	andi	r24, 0x01	; 1
     450:	88 23       	and	r24, r24
     452:	e9 f0       	breq	.+58     	; 0x48e <__stack+0x2f>
              flags.SupplyAuto=0;
     454:	80 91 91 00 	lds	r24, 0x0091
     458:	8f 7e       	andi	r24, 0xEF	; 239
     45a:	80 93 91 00 	sts	0x0091, r24
                TimeSupply=adc7;
     45e:	80 91 8a 00 	lds	r24, 0x008A
     462:	90 91 8b 00 	lds	r25, 0x008B
     466:	90 93 83 00 	sts	0x0083, r25
     46a:	80 93 82 00 	sts	0x0082, r24
                TimeStop=adc6;
     46e:	80 91 88 00 	lds	r24, 0x0088
     472:	90 91 89 00 	lds	r25, 0x0089
     476:	90 93 81 00 	sts	0x0081, r25
     47a:	80 93 80 00 	sts	0x0080, r24
                CurrentTime=adc7;
     47e:	80 91 8a 00 	lds	r24, 0x008A
     482:	90 91 8b 00 	lds	r25, 0x008B
     486:	90 93 85 00 	sts	0x0085, r25
     48a:	80 93 84 00 	sts	0x0084, r24
            }
                if (CH(C,3)){
     48e:	83 e3       	ldi	r24, 0x33	; 51
     490:	90 e0       	ldi	r25, 0x00	; 0
     492:	fc 01       	movw	r30, r24
     494:	80 81       	ld	r24, Z
     496:	88 2f       	mov	r24, r24
     498:	90 e0       	ldi	r25, 0x00	; 0
     49a:	88 70       	andi	r24, 0x08	; 8
     49c:	99 27       	eor	r25, r25
     49e:	00 97       	sbiw	r24, 0x00	; 0
     4a0:	51 f0       	breq	.+20     	; 0x4b6 <__stack+0x57>
                 //   flags.SupplyManual=0;
                    CB(C,3);
     4a2:	85 e3       	ldi	r24, 0x35	; 53
     4a4:	90 e0       	ldi	r25, 0x00	; 0
     4a6:	25 e3       	ldi	r18, 0x35	; 53
     4a8:	30 e0       	ldi	r19, 0x00	; 0
     4aa:	f9 01       	movw	r30, r18
     4ac:	20 81       	ld	r18, Z
     4ae:	27 7f       	andi	r18, 0xF7	; 247
     4b0:	fc 01       	movw	r30, r24
     4b2:	20 83       	st	Z, r18
     4b4:	09 c0       	rjmp	.+18     	; 0x4c8 <__stack+0x69>
                }else {
                //    flags.SupplyManual=1;
                    SB(C,3);
     4b6:	85 e3       	ldi	r24, 0x35	; 53
     4b8:	90 e0       	ldi	r25, 0x00	; 0
     4ba:	25 e3       	ldi	r18, 0x35	; 53
     4bc:	30 e0       	ldi	r19, 0x00	; 0
     4be:	f9 01       	movw	r30, r18
     4c0:	20 81       	ld	r18, Z
     4c2:	28 60       	ori	r18, 0x08	; 8
     4c4:	fc 01       	movw	r30, r24
     4c6:	20 83       	st	Z, r18
                }
}
     4c8:	df 91       	pop	r29
     4ca:	cf 91       	pop	r28
     4cc:	08 95       	ret

000004ce <FuncINDTime>:


void FuncINDTime(){
     4ce:	cf 93       	push	r28
     4d0:	df 93       	push	r29
     4d2:	cd b7       	in	r28, 0x3d	; 61
     4d4:	de b7       	in	r29, 0x3e	; 62
    IND_Time(TimeSupply,5);
     4d6:	80 91 82 00 	lds	r24, 0x0082
     4da:	90 91 83 00 	lds	r25, 0x0083
     4de:	65 e0       	ldi	r22, 0x05	; 5
     4e0:	96 d1       	rcall	.+812    	; 0x80e <IND_Time>
    IND_Time(TimeStop,1);
     4e2:	80 91 80 00 	lds	r24, 0x0080
     4e6:	90 91 81 00 	lds	r25, 0x0081
     4ea:	61 e0       	ldi	r22, 0x01	; 1
     4ec:	90 d1       	rcall	.+800    	; 0x80e <IND_Time>
    AddTask(FuncINDTime,250);
     4ee:	6a ef       	ldi	r22, 0xFA	; 250
     4f0:	70 e0       	ldi	r23, 0x00	; 0
     4f2:	87 e6       	ldi	r24, 0x67	; 103
     4f4:	92 e0       	ldi	r25, 0x02	; 2
     4f6:	58 d6       	rcall	.+3248   	; 0x11a8 <AddTask>
}
     4f8:	df 91       	pop	r29
     4fa:	cf 91       	pop	r28
     4fc:	08 95       	ret

000004fe <Furnance_sw>:

void Furnance_sw(){
     4fe:	cf 93       	push	r28
     500:	df 93       	push	r29
     502:	cd b7       	in	r28, 0x3d	; 61
     504:	de b7       	in	r29, 0x3e	; 62
           AddTask(FuncINDTime,1500);
     506:	6c ed       	ldi	r22, 0xDC	; 220
     508:	75 e0       	ldi	r23, 0x05	; 5
     50a:	87 e6       	ldi	r24, 0x67	; 103
     50c:	92 e0       	ldi	r25, 0x02	; 2
     50e:	4c d6       	rcall	.+3224   	; 0x11a8 <AddTask>
                IND_OutputFormatChar("TPUB",0,1);
     510:	41 e0       	ldi	r20, 0x01	; 1
     512:	60 e0       	ldi	r22, 0x00	; 0
     514:	84 e7       	ldi	r24, 0x74	; 116
     516:	90 e0       	ldi	r25, 0x00	; 0
     518:	8d d0       	rcall	.+282    	; 0x634 <IND_OutputFormatChar>
                if (CH(C,5)){
     51a:	83 e3       	ldi	r24, 0x33	; 51
     51c:	90 e0       	ldi	r25, 0x00	; 0
     51e:	fc 01       	movw	r30, r24
     520:	80 81       	ld	r24, Z
     522:	88 2f       	mov	r24, r24
     524:	90 e0       	ldi	r25, 0x00	; 0
     526:	80 72       	andi	r24, 0x20	; 32
     528:	99 27       	eor	r25, r25
     52a:	00 97       	sbiw	r24, 0x00	; 0
     52c:	51 f0       	breq	.+20     	; 0x542 <Furnance_sw+0x44>
          //          flags.Furnace=0;
                    CB(C,5);
     52e:	85 e3       	ldi	r24, 0x35	; 53
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	25 e3       	ldi	r18, 0x35	; 53
     534:	30 e0       	ldi	r19, 0x00	; 0
     536:	f9 01       	movw	r30, r18
     538:	20 81       	ld	r18, Z
     53a:	2f 7d       	andi	r18, 0xDF	; 223
     53c:	fc 01       	movw	r30, r24
     53e:	20 83       	st	Z, r18
     540:	09 c0       	rjmp	.+18     	; 0x554 <Furnance_sw+0x56>
                }else {
          //          flags.Furnace=1;
                    SB(C,5);
     542:	85 e3       	ldi	r24, 0x35	; 53
     544:	90 e0       	ldi	r25, 0x00	; 0
     546:	25 e3       	ldi	r18, 0x35	; 53
     548:	30 e0       	ldi	r19, 0x00	; 0
     54a:	f9 01       	movw	r30, r18
     54c:	20 81       	ld	r18, Z
     54e:	20 62       	ori	r18, 0x20	; 32
     550:	fc 01       	movw	r30, r24
     552:	20 83       	st	Z, r18
                }
                KeyCurrentCode=0;
     554:	10 92 c0 00 	sts	0x00C0, r1
     558:	10 92 bf 00 	sts	0x00BF, r1

}
     55c:	df 91       	pop	r29
     55e:	cf 91       	pop	r28
     560:	08 95       	ret

00000562 <Fire_sw>:

void Fire_sw(){
     562:	cf 93       	push	r28
     564:	df 93       	push	r29
     566:	cd b7       	in	r28, 0x3d	; 61
     568:	de b7       	in	r29, 0x3e	; 62
         AddTask(FuncINDTime,1500);
     56a:	6c ed       	ldi	r22, 0xDC	; 220
     56c:	75 e0       	ldi	r23, 0x05	; 5
     56e:	87 e6       	ldi	r24, 0x67	; 103
     570:	92 e0       	ldi	r25, 0x02	; 2
     572:	1a d6       	rcall	.+3124   	; 0x11a8 <AddTask>
            IND_OutputFormatChar("_GOP",0,1);
     574:	41 e0       	ldi	r20, 0x01	; 1
     576:	60 e0       	ldi	r22, 0x00	; 0
     578:	89 e7       	ldi	r24, 0x79	; 121
     57a:	90 e0       	ldi	r25, 0x00	; 0
     57c:	5b d0       	rcall	.+182    	; 0x634 <IND_OutputFormatChar>
                if (CH(C,4)){
     57e:	83 e3       	ldi	r24, 0x33	; 51
     580:	90 e0       	ldi	r25, 0x00	; 0
     582:	fc 01       	movw	r30, r24
     584:	80 81       	ld	r24, Z
     586:	88 2f       	mov	r24, r24
     588:	90 e0       	ldi	r25, 0x00	; 0
     58a:	80 71       	andi	r24, 0x10	; 16
     58c:	99 27       	eor	r25, r25
     58e:	00 97       	sbiw	r24, 0x00	; 0
     590:	51 f0       	breq	.+20     	; 0x5a6 <Fire_sw+0x44>
            //        flags.Fire=0;
                    CB(C,4);
     592:	85 e3       	ldi	r24, 0x35	; 53
     594:	90 e0       	ldi	r25, 0x00	; 0
     596:	25 e3       	ldi	r18, 0x35	; 53
     598:	30 e0       	ldi	r19, 0x00	; 0
     59a:	f9 01       	movw	r30, r18
     59c:	20 81       	ld	r18, Z
     59e:	2f 7e       	andi	r18, 0xEF	; 239
     5a0:	fc 01       	movw	r30, r24
     5a2:	20 83       	st	Z, r18
     5a4:	09 c0       	rjmp	.+18     	; 0x5b8 <Fire_sw+0x56>
                }else {
            //        flags.Fire=1;
                    SB(C,4);
     5a6:	85 e3       	ldi	r24, 0x35	; 53
     5a8:	90 e0       	ldi	r25, 0x00	; 0
     5aa:	25 e3       	ldi	r18, 0x35	; 53
     5ac:	30 e0       	ldi	r19, 0x00	; 0
     5ae:	f9 01       	movw	r30, r18
     5b0:	20 81       	ld	r18, Z
     5b2:	20 61       	ori	r18, 0x10	; 16
     5b4:	fc 01       	movw	r30, r24
     5b6:	20 83       	st	Z, r18
                }
                KeyCurrentCode=0;
     5b8:	10 92 c0 00 	sts	0x00C0, r1
     5bc:	10 92 bf 00 	sts	0x00BF, r1
}
     5c0:	df 91       	pop	r29
     5c2:	cf 91       	pop	r28
     5c4:	08 95       	ret

000005c6 <ShowAdc6>:

void ShowAdc6(){
     5c6:	cf 93       	push	r28
     5c8:	df 93       	push	r29
     5ca:	cd b7       	in	r28, 0x3d	; 61
     5cc:	de b7       	in	r29, 0x3e	; 62
    AddTask(FuncINDTime,1000);
     5ce:	68 ee       	ldi	r22, 0xE8	; 232
     5d0:	73 e0       	ldi	r23, 0x03	; 3
     5d2:	87 e6       	ldi	r24, 0x67	; 103
     5d4:	92 e0       	ldi	r25, 0x02	; 2
     5d6:	e8 d5       	rcall	.+3024   	; 0x11a8 <AddTask>
    IND_Time(adc6,5);
     5d8:	80 91 88 00 	lds	r24, 0x0088
     5dc:	90 91 89 00 	lds	r25, 0x0089
     5e0:	65 e0       	ldi	r22, 0x05	; 5
     5e2:	15 d1       	rcall	.+554    	; 0x80e <IND_Time>
}
     5e4:	df 91       	pop	r29
     5e6:	cf 91       	pop	r28
     5e8:	08 95       	ret

000005ea <ShowAdc7>:

void ShowAdc7(){
     5ea:	cf 93       	push	r28
     5ec:	df 93       	push	r29
     5ee:	cd b7       	in	r28, 0x3d	; 61
     5f0:	de b7       	in	r29, 0x3e	; 62
    AddTask(FuncINDTime,1000);
     5f2:	68 ee       	ldi	r22, 0xE8	; 232
     5f4:	73 e0       	ldi	r23, 0x03	; 3
     5f6:	87 e6       	ldi	r24, 0x67	; 103
     5f8:	92 e0       	ldi	r25, 0x02	; 2
     5fa:	d6 d5       	rcall	.+2988   	; 0x11a8 <AddTask>
    IND_Time(adc7,1);
     5fc:	80 91 8a 00 	lds	r24, 0x008A
     600:	90 91 8b 00 	lds	r25, 0x008B
     604:	61 e0       	ldi	r22, 0x01	; 1
     606:	03 d1       	rcall	.+518    	; 0x80e <IND_Time>

}
     608:	df 91       	pop	r29
     60a:	cf 91       	pop	r28
     60c:	08 95       	ret

0000060e <ascii2int>:
  {(1<<IND_A)|(1<<IND_B)|(1<<IND_C)|(1<<IND_D)|(1<<IND_E)|(1<<IND_F)|(1<<IND_G),86}, //V B
  {(0<<IND_A)|(1<<IND_B)|(1<<IND_C)|(1<<IND_D)|(0<<IND_E)|(1<<IND_F)|(1<<IND_G),89}, //Y Y

};

uint8_t ascii2int(uint8_t symbol){
     60e:	cf 93       	push	r28
     610:	df 93       	push	r29
     612:	00 d0       	rcall	.+0      	; 0x614 <ascii2int+0x6>
     614:	1f 92       	push	r1
     616:	cd b7       	in	r28, 0x3d	; 61
     618:	de b7       	in	r29, 0x3e	; 62
     61a:	8b 83       	std	Y+3, r24	; 0x03
    int tmp=(int)(symbol);
     61c:	8b 81       	ldd	r24, Y+3	; 0x03
     61e:	88 2f       	mov	r24, r24
     620:	90 e0       	ldi	r25, 0x00	; 0
     622:	9a 83       	std	Y+2, r25	; 0x02
     624:	89 83       	std	Y+1, r24	; 0x01
    return tmp;
     626:	89 81       	ldd	r24, Y+1	; 0x01
}
     628:	0f 90       	pop	r0
     62a:	0f 90       	pop	r0
     62c:	0f 90       	pop	r0
     62e:	df 91       	pop	r29
     630:	cf 91       	pop	r28
     632:	08 95       	ret

00000634 <IND_OutputFormatChar>:
/******************************************************************************/
void IND_OutputFormatChar(char char_string[], uint8_t comma, uint8_t position)
// TODO: СЂРµР°Р»РёР·РѕРІР°С‚СЊ Р±РµРіСѓС‰СѓСЋ СЃС‚СЂРѕРєСѓ СЃ РёСЃРїРѕР»СЊР·РѕРІР°РЅРёРµРј РєРѕР»РёС‡РµСЃС‚РІР° СЌР»РµРјРµРЅС‚РѕРІ, Р° С‚Р°РєР¶Рµ РјРёРіР°РЅРёРµ СЃРёРјРІРѕР»РѕРІ
{
     634:	cf 92       	push	r12
     636:	df 92       	push	r13
     638:	ef 92       	push	r14
     63a:	ff 92       	push	r15
     63c:	0f 93       	push	r16
     63e:	1f 93       	push	r17
     640:	cf 93       	push	r28
     642:	df 93       	push	r29
     644:	cd b7       	in	r28, 0x3d	; 61
     646:	de b7       	in	r29, 0x3e	; 62
     648:	61 97       	sbiw	r28, 0x11	; 17
     64a:	0f b6       	in	r0, 0x3f	; 63
     64c:	f8 94       	cli
     64e:	de bf       	out	0x3e, r29	; 62
     650:	0f be       	out	0x3f, r0	; 63
     652:	cd bf       	out	0x3d, r28	; 61
     654:	9f 87       	std	Y+15, r25	; 0x0f
     656:	8e 87       	std	Y+14, r24	; 0x0e
     658:	68 8b       	std	Y+16, r22	; 0x10
     65a:	49 8b       	std	Y+17, r20	; 0x11
                                                    // РЅРѕ РЅРµ Р·Р°Р±РёРІР°С‚СЊ Р¶Рµ С‚СѓРґР° РІСЃСЋ С‚Р°Р±Р»РёС†Сѓ
    }
  if ((comma <= IND_AMOUNT_NUM) && (comma != 0)) {
    ind_buf[comma-1] |= 1<<IND_COM;
  }
}
     65c:	0d b7       	in	r16, 0x3d	; 61
     65e:	1e b7       	in	r17, 0x3e	; 62
     660:	8d b7       	in	r24, 0x3d	; 61
     662:	9e b7       	in	r25, 0x3e	; 62
     664:	7c 01       	movw	r14, r24
/******************************************************************************/
void IND_OutputFormatChar(char char_string[], uint8_t comma, uint8_t position)
// TODO: СЂРµР°Р»РёР·РѕРІР°С‚СЊ Р±РµРіСѓС‰СѓСЋ СЃС‚СЂРѕРєСѓ СЃ РёСЃРїРѕР»СЊР·РѕРІР°РЅРёРµРј РєРѕР»РёС‡РµСЃС‚РІР° СЌР»РµРјРµРЅС‚РѕРІ, Р° С‚Р°РєР¶Рµ РјРёРіР°РЅРёРµ СЃРёРјРІРѕР»РѕРІ
{
    uint8_t i,j,amount;
    char tmp[strlen(char_string)];
     666:	8e 85       	ldd	r24, Y+14	; 0x0e
     668:	9f 85       	ldd	r25, Y+15	; 0x0f
     66a:	9d d9       	rcall	.-3270   	; 0xfffff9a6 <__fuse+0xff7df9a6>
     66c:	9c 01       	movw	r18, r24
     66e:	21 50       	subi	r18, 0x01	; 1
     670:	31 09       	sbc	r19, r1
     672:	3c 83       	std	Y+4, r19	; 0x04
     674:	2b 83       	std	Y+3, r18	; 0x03
     676:	2d b7       	in	r18, 0x3d	; 61
     678:	3e b7       	in	r19, 0x3e	; 62
     67a:	28 1b       	sub	r18, r24
     67c:	39 0b       	sbc	r19, r25
     67e:	0f b6       	in	r0, 0x3f	; 63
     680:	f8 94       	cli
     682:	3e bf       	out	0x3e, r19	; 62
     684:	0f be       	out	0x3f, r0	; 63
     686:	2d bf       	out	0x3d, r18	; 61
     688:	8d b7       	in	r24, 0x3d	; 61
     68a:	9e b7       	in	r25, 0x3e	; 62
     68c:	01 96       	adiw	r24, 0x01	; 1
     68e:	9e 83       	std	Y+6, r25	; 0x06
     690:	8d 83       	std	Y+5, r24	; 0x05
    amount=strlen(char_string);
     692:	8e 85       	ldd	r24, Y+14	; 0x0e
     694:	9f 85       	ldd	r25, Y+15	; 0x0f
     696:	87 d9       	rcall	.-3314   	; 0xfffff9a6 <__fuse+0xff7df9a6>
     698:	8f 83       	std	Y+7, r24	; 0x07
    for (i=0,j=strlen(char_string);i<strlen(char_string);i++,j--){ //Р·РµСЂРєР°Р»РёСЂРѕРІР°РЅРёРµ СЃС‚СЂРѕРєРё
     69a:	19 82       	std	Y+1, r1	; 0x01
     69c:	8e 85       	ldd	r24, Y+14	; 0x0e
     69e:	9f 85       	ldd	r25, Y+15	; 0x0f
     6a0:	82 d9       	rcall	.-3324   	; 0xfffff9a6 <__fuse+0xff7df9a6>
     6a2:	8a 83       	std	Y+2, r24	; 0x02
     6a4:	19 c0       	rjmp	.+50     	; 0x6d8 <IND_OutputFormatChar+0xa4>
            tmp[j-1]=char_string[i];
     6a6:	8a 81       	ldd	r24, Y+2	; 0x02
     6a8:	88 2f       	mov	r24, r24
     6aa:	90 e0       	ldi	r25, 0x00	; 0
     6ac:	01 97       	sbiw	r24, 0x01	; 1
     6ae:	29 81       	ldd	r18, Y+1	; 0x01
     6b0:	22 2f       	mov	r18, r18
     6b2:	30 e0       	ldi	r19, 0x00	; 0
     6b4:	4e 85       	ldd	r20, Y+14	; 0x0e
     6b6:	5f 85       	ldd	r21, Y+15	; 0x0f
     6b8:	24 0f       	add	r18, r20
     6ba:	35 1f       	adc	r19, r21
     6bc:	f9 01       	movw	r30, r18
     6be:	40 81       	ld	r20, Z
     6c0:	2d 81       	ldd	r18, Y+5	; 0x05
     6c2:	3e 81       	ldd	r19, Y+6	; 0x06
     6c4:	82 0f       	add	r24, r18
     6c6:	93 1f       	adc	r25, r19
     6c8:	fc 01       	movw	r30, r24
     6ca:	40 83       	st	Z, r20
// TODO: СЂРµР°Р»РёР·РѕРІР°С‚СЊ Р±РµРіСѓС‰СѓСЋ СЃС‚СЂРѕРєСѓ СЃ РёСЃРїРѕР»СЊР·РѕРІР°РЅРёРµРј РєРѕР»РёС‡РµСЃС‚РІР° СЌР»РµРјРµРЅС‚РѕРІ, Р° С‚Р°РєР¶Рµ РјРёРіР°РЅРёРµ СЃРёРјРІРѕР»РѕРІ
{
    uint8_t i,j,amount;
    char tmp[strlen(char_string)];
    amount=strlen(char_string);
    for (i=0,j=strlen(char_string);i<strlen(char_string);i++,j--){ //Р·РµСЂРєР°Р»РёСЂРѕРІР°РЅРёРµ СЃС‚СЂРѕРєРё
     6cc:	89 81       	ldd	r24, Y+1	; 0x01
     6ce:	8f 5f       	subi	r24, 0xFF	; 255
     6d0:	89 83       	std	Y+1, r24	; 0x01
     6d2:	8a 81       	ldd	r24, Y+2	; 0x02
     6d4:	81 50       	subi	r24, 0x01	; 1
     6d6:	8a 83       	std	Y+2, r24	; 0x02
     6d8:	89 81       	ldd	r24, Y+1	; 0x01
     6da:	c8 2e       	mov	r12, r24
     6dc:	d1 2c       	mov	r13, r1
     6de:	8e 85       	ldd	r24, Y+14	; 0x0e
     6e0:	9f 85       	ldd	r25, Y+15	; 0x0f
     6e2:	61 d9       	rcall	.-3390   	; 0xfffff9a6 <__fuse+0xff7df9a6>
     6e4:	c8 16       	cp	r12, r24
     6e6:	d9 06       	cpc	r13, r25
     6e8:	f0 f2       	brcs	.-68     	; 0x6a6 <IND_OutputFormatChar+0x72>
            tmp[j-1]=char_string[i];
    }

    for (j=0;j<amount;j++){
     6ea:	1a 82       	std	Y+2, r1	; 0x02
     6ec:	5a c0       	rjmp	.+180    	; 0x7a2 <IND_OutputFormatChar+0x16e>
        for (i=11;i<=((int)tmp[j]);++i){    //РґРѕР±Р°РІР»РµРЅРѕ СЃС‚Р°СЂС‚РѕРІРѕРµ Р·РЅР°С‡РµРЅРёРµ , РїРµСЂРµСЃРєР°РєРёРІР°РµРј С†РёС„СЂС‹
     6ee:	8b e0       	ldi	r24, 0x0B	; 11
     6f0:	89 83       	std	Y+1, r24	; 0x01
     6f2:	24 c0       	rjmp	.+72     	; 0x73c <IND_OutputFormatChar+0x108>
            if (read_byte_flash(number[i][1])==(int)tmp[j]) break; // РІСЃСЏ С‚СЂР°Р±Р»Р° Р±С‹Р»Р° СЃ С‡С‚РµРЅРёРµРј СЃ РїР·Сѓ
     6f4:	89 81       	ldd	r24, Y+1	; 0x01
     6f6:	88 2f       	mov	r24, r24
     6f8:	90 e0       	ldi	r25, 0x00	; 0
     6fa:	88 0f       	add	r24, r24
     6fc:	99 1f       	adc	r25, r25
     6fe:	01 96       	adiw	r24, 0x01	; 1
     700:	8e 5b       	subi	r24, 0xBE	; 190
     702:	9f 4f       	sbci	r25, 0xFF	; 255
     704:	99 87       	std	Y+9, r25	; 0x09
     706:	88 87       	std	Y+8, r24	; 0x08
     708:	88 85       	ldd	r24, Y+8	; 0x08
     70a:	99 85       	ldd	r25, Y+9	; 0x09
     70c:	fc 01       	movw	r30, r24
     70e:	d4 90       	lpm	r13, Z+
     710:	da 86       	std	Y+10, r13	; 0x0a
     712:	8a 85       	ldd	r24, Y+10	; 0x0a
     714:	28 2f       	mov	r18, r24
     716:	30 e0       	ldi	r19, 0x00	; 0
     718:	8a 81       	ldd	r24, Y+2	; 0x02
     71a:	88 2f       	mov	r24, r24
     71c:	90 e0       	ldi	r25, 0x00	; 0
     71e:	4d 81       	ldd	r20, Y+5	; 0x05
     720:	5e 81       	ldd	r21, Y+6	; 0x06
     722:	84 0f       	add	r24, r20
     724:	95 1f       	adc	r25, r21
     726:	fc 01       	movw	r30, r24
     728:	80 81       	ld	r24, Z
     72a:	99 27       	eor	r25, r25
     72c:	87 fd       	sbrc	r24, 7
     72e:	90 95       	com	r25
     730:	28 17       	cp	r18, r24
     732:	39 07       	cpc	r19, r25
     734:	b1 f0       	breq	.+44     	; 0x762 <IND_OutputFormatChar+0x12e>
    for (i=0,j=strlen(char_string);i<strlen(char_string);i++,j--){ //Р·РµСЂРєР°Р»РёСЂРѕРІР°РЅРёРµ СЃС‚СЂРѕРєРё
            tmp[j-1]=char_string[i];
    }

    for (j=0;j<amount;j++){
        for (i=11;i<=((int)tmp[j]);++i){    //РґРѕР±Р°РІР»РµРЅРѕ СЃС‚Р°СЂС‚РѕРІРѕРµ Р·РЅР°С‡РµРЅРёРµ , РїРµСЂРµСЃРєР°РєРёРІР°РµРј С†РёС„СЂС‹
     736:	89 81       	ldd	r24, Y+1	; 0x01
     738:	8f 5f       	subi	r24, 0xFF	; 255
     73a:	89 83       	std	Y+1, r24	; 0x01
     73c:	89 81       	ldd	r24, Y+1	; 0x01
     73e:	28 2f       	mov	r18, r24
     740:	30 e0       	ldi	r19, 0x00	; 0
     742:	8a 81       	ldd	r24, Y+2	; 0x02
     744:	88 2f       	mov	r24, r24
     746:	90 e0       	ldi	r25, 0x00	; 0
     748:	4d 81       	ldd	r20, Y+5	; 0x05
     74a:	5e 81       	ldd	r21, Y+6	; 0x06
     74c:	84 0f       	add	r24, r20
     74e:	95 1f       	adc	r25, r21
     750:	fc 01       	movw	r30, r24
     752:	80 81       	ld	r24, Z
     754:	99 27       	eor	r25, r25
     756:	87 fd       	sbrc	r24, 7
     758:	90 95       	com	r25
     75a:	82 17       	cp	r24, r18
     75c:	93 07       	cpc	r25, r19
     75e:	54 f6       	brge	.-108    	; 0x6f4 <IND_OutputFormatChar+0xc0>
     760:	01 c0       	rjmp	.+2      	; 0x764 <IND_OutputFormatChar+0x130>
            if (read_byte_flash(number[i][1])==(int)tmp[j]) break; // РІСЃСЏ С‚СЂР°Р±Р»Р° Р±С‹Р»Р° СЃ С‡С‚РµРЅРёРµРј СЃ РїР·Сѓ
     762:	00 00       	nop
        }
      ind_buf[j+position-1] = read_byte_flash(number[i][0]); //СЌС‚Рѕ РєРѕРЅРµС‡РЅРѕ РЅРµ РѕРїС‚РёРјР°Р»СЊРЅРѕ РёСЃРєР°С‚СЊ РІ РїР·Сѓ
     764:	8a 81       	ldd	r24, Y+2	; 0x02
     766:	28 2f       	mov	r18, r24
     768:	30 e0       	ldi	r19, 0x00	; 0
     76a:	89 89       	ldd	r24, Y+17	; 0x11
     76c:	88 2f       	mov	r24, r24
     76e:	90 e0       	ldi	r25, 0x00	; 0
     770:	82 0f       	add	r24, r18
     772:	93 1f       	adc	r25, r19
     774:	01 97       	sbiw	r24, 0x01	; 1
     776:	29 81       	ldd	r18, Y+1	; 0x01
     778:	22 2f       	mov	r18, r18
     77a:	30 e0       	ldi	r19, 0x00	; 0
     77c:	22 0f       	add	r18, r18
     77e:	33 1f       	adc	r19, r19
     780:	2e 5b       	subi	r18, 0xBE	; 190
     782:	3f 4f       	sbci	r19, 0xFF	; 255
     784:	3c 87       	std	Y+12, r19	; 0x0c
     786:	2b 87       	std	Y+11, r18	; 0x0b
     788:	2b 85       	ldd	r18, Y+11	; 0x0b
     78a:	3c 85       	ldd	r19, Y+12	; 0x0c
     78c:	f9 01       	movw	r30, r18
     78e:	d4 90       	lpm	r13, Z+
     790:	dd 86       	std	Y+13, r13	; 0x0d
     792:	2d 85       	ldd	r18, Y+13	; 0x0d
     794:	8d 56       	subi	r24, 0x6D	; 109
     796:	9f 4f       	sbci	r25, 0xFF	; 255
     798:	fc 01       	movw	r30, r24
     79a:	20 83       	st	Z, r18
    amount=strlen(char_string);
    for (i=0,j=strlen(char_string);i<strlen(char_string);i++,j--){ //Р·РµСЂРєР°Р»РёСЂРѕРІР°РЅРёРµ СЃС‚СЂРѕРєРё
            tmp[j-1]=char_string[i];
    }

    for (j=0;j<amount;j++){
     79c:	8a 81       	ldd	r24, Y+2	; 0x02
     79e:	8f 5f       	subi	r24, 0xFF	; 255
     7a0:	8a 83       	std	Y+2, r24	; 0x02
     7a2:	9a 81       	ldd	r25, Y+2	; 0x02
     7a4:	8f 81       	ldd	r24, Y+7	; 0x07
     7a6:	98 17       	cp	r25, r24
     7a8:	08 f4       	brcc	.+2      	; 0x7ac <IND_OutputFormatChar+0x178>
     7aa:	a1 cf       	rjmp	.-190    	; 0x6ee <IND_OutputFormatChar+0xba>
            if (read_byte_flash(number[i][1])==(int)tmp[j]) break; // РІСЃСЏ С‚СЂР°Р±Р»Р° Р±С‹Р»Р° СЃ С‡С‚РµРЅРёРµРј СЃ РїР·Сѓ
        }
      ind_buf[j+position-1] = read_byte_flash(number[i][0]); //СЌС‚Рѕ РєРѕРЅРµС‡РЅРѕ РЅРµ РѕРїС‚РёРјР°Р»СЊРЅРѕ РёСЃРєР°С‚СЊ РІ РїР·Сѓ
                                                    // РЅРѕ РЅРµ Р·Р°Р±РёРІР°С‚СЊ Р¶Рµ С‚СѓРґР° РІСЃСЋ С‚Р°Р±Р»РёС†Сѓ
    }
  if ((comma <= IND_AMOUNT_NUM) && (comma != 0)) {
     7ac:	88 89       	ldd	r24, Y+16	; 0x10
     7ae:	89 30       	cpi	r24, 0x09	; 9
     7b0:	a8 f4       	brcc	.+42     	; 0x7dc <IND_OutputFormatChar+0x1a8>
     7b2:	88 89       	ldd	r24, Y+16	; 0x10
     7b4:	88 23       	and	r24, r24
     7b6:	91 f0       	breq	.+36     	; 0x7dc <IND_OutputFormatChar+0x1a8>
    ind_buf[comma-1] |= 1<<IND_COM;
     7b8:	88 89       	ldd	r24, Y+16	; 0x10
     7ba:	88 2f       	mov	r24, r24
     7bc:	90 e0       	ldi	r25, 0x00	; 0
     7be:	01 97       	sbiw	r24, 0x01	; 1
     7c0:	28 89       	ldd	r18, Y+16	; 0x10
     7c2:	22 2f       	mov	r18, r18
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	21 50       	subi	r18, 0x01	; 1
     7c8:	31 09       	sbc	r19, r1
     7ca:	2d 56       	subi	r18, 0x6D	; 109
     7cc:	3f 4f       	sbci	r19, 0xFF	; 255
     7ce:	f9 01       	movw	r30, r18
     7d0:	20 81       	ld	r18, Z
     7d2:	20 68       	ori	r18, 0x80	; 128
     7d4:	8d 56       	subi	r24, 0x6D	; 109
     7d6:	9f 4f       	sbci	r25, 0xFF	; 255
     7d8:	fc 01       	movw	r30, r24
     7da:	20 83       	st	Z, r18
     7dc:	0f b6       	in	r0, 0x3f	; 63
     7de:	f8 94       	cli
     7e0:	fe be       	out	0x3e, r15	; 62
     7e2:	0f be       	out	0x3f, r0	; 63
     7e4:	ed be       	out	0x3d, r14	; 61
  }
}
     7e6:	0f b6       	in	r0, 0x3f	; 63
     7e8:	f8 94       	cli
     7ea:	1e bf       	out	0x3e, r17	; 62
     7ec:	0f be       	out	0x3f, r0	; 63
     7ee:	0d bf       	out	0x3d, r16	; 61
     7f0:	61 96       	adiw	r28, 0x11	; 17
     7f2:	0f b6       	in	r0, 0x3f	; 63
     7f4:	f8 94       	cli
     7f6:	de bf       	out	0x3e, r29	; 62
     7f8:	0f be       	out	0x3f, r0	; 63
     7fa:	cd bf       	out	0x3d, r28	; 61
     7fc:	df 91       	pop	r29
     7fe:	cf 91       	pop	r28
     800:	1f 91       	pop	r17
     802:	0f 91       	pop	r16
     804:	ff 90       	pop	r15
     806:	ef 90       	pop	r14
     808:	df 90       	pop	r13
     80a:	cf 90       	pop	r12
     80c:	08 95       	ret

0000080e <IND_Time>:

void IND_Time(uint16_t CurrentTime,uint8_t position){
     80e:	ff 92       	push	r15
     810:	0f 93       	push	r16
     812:	1f 93       	push	r17
     814:	cf 93       	push	r28
     816:	df 93       	push	r29
     818:	cd b7       	in	r28, 0x3d	; 61
     81a:	de b7       	in	r29, 0x3e	; 62
     81c:	60 97       	sbiw	r28, 0x10	; 16
     81e:	0f b6       	in	r0, 0x3f	; 63
     820:	f8 94       	cli
     822:	de bf       	out	0x3e, r29	; 62
     824:	0f be       	out	0x3f, r0	; 63
     826:	cd bf       	out	0x3d, r28	; 61
     828:	9f 87       	std	Y+15, r25	; 0x0f
     82a:	8e 87       	std	Y+14, r24	; 0x0e
     82c:	68 8b       	std	Y+16, r22	; 0x10
        uint8_t blk_dot;
    !(CurrentTime%2)?(blk_dot=1):(blk_dot=0);   // РјРёРіР°РµС‚ РїРѕ С‡РµС‚РЅРѕСЃС‚Рё ...
     82e:	8e 85       	ldd	r24, Y+14	; 0x0e
     830:	9f 85       	ldd	r25, Y+15	; 0x0f
     832:	81 70       	andi	r24, 0x01	; 1
     834:	99 27       	eor	r25, r25
     836:	00 97       	sbiw	r24, 0x00	; 0
     838:	19 f4       	brne	.+6      	; 0x840 <IND_Time+0x32>
     83a:	81 e0       	ldi	r24, 0x01	; 1
     83c:	89 83       	std	Y+1, r24	; 0x01
     83e:	01 c0       	rjmp	.+2      	; 0x842 <IND_Time+0x34>
     840:	19 82       	std	Y+1, r1	; 0x01
	ind_buf[3+position-1] = read_byte_flash(number[CurrentTime % 6000/600]); // Р·РґРµСЃСЊ СЂР°СЃРєР»Р°РґС‹РІР°РµРј С‡РёСЃР»Рѕ РЅР° СЂР°Р·СЂСЏРґС‹
     842:	88 89       	ldd	r24, Y+16	; 0x10
     844:	88 2f       	mov	r24, r24
     846:	90 e0       	ldi	r25, 0x00	; 0
     848:	8c 01       	movw	r16, r24
     84a:	0e 5f       	subi	r16, 0xFE	; 254
     84c:	1f 4f       	sbci	r17, 0xFF	; 255
     84e:	8e 85       	ldd	r24, Y+14	; 0x0e
     850:	9f 85       	ldd	r25, Y+15	; 0x0f
     852:	20 e7       	ldi	r18, 0x70	; 112
     854:	37 e1       	ldi	r19, 0x17	; 23
     856:	b9 01       	movw	r22, r18
     858:	92 d8       	rcall	.-3804   	; 0xfffff97e <__fuse+0xff7df97e>
     85a:	96 95       	lsr	r25
     85c:	87 95       	ror	r24
     85e:	96 95       	lsr	r25
     860:	87 95       	ror	r24
     862:	96 95       	lsr	r25
     864:	87 95       	ror	r24
     866:	9c 01       	movw	r18, r24
     868:	af e4       	ldi	r26, 0x4F	; 79
     86a:	bb e1       	ldi	r27, 0x1B	; 27
     86c:	7c d8       	rcall	.-3848   	; 0xfffff966 <__fuse+0xff7df966>
     86e:	96 95       	lsr	r25
     870:	87 95       	ror	r24
     872:	96 95       	lsr	r25
     874:	87 95       	ror	r24
     876:	96 95       	lsr	r25
     878:	87 95       	ror	r24
     87a:	88 0f       	add	r24, r24
     87c:	99 1f       	adc	r25, r25
     87e:	8e 5b       	subi	r24, 0xBE	; 190
     880:	9f 4f       	sbci	r25, 0xFF	; 255
     882:	9b 83       	std	Y+3, r25	; 0x03
     884:	8a 83       	std	Y+2, r24	; 0x02
     886:	8a 81       	ldd	r24, Y+2	; 0x02
     888:	9b 81       	ldd	r25, Y+3	; 0x03
     88a:	fc 01       	movw	r30, r24
     88c:	f4 90       	lpm	r15, Z+
     88e:	fc 82       	std	Y+4, r15	; 0x04
     890:	2c 81       	ldd	r18, Y+4	; 0x04
     892:	c8 01       	movw	r24, r16
     894:	8d 56       	subi	r24, 0x6D	; 109
     896:	9f 4f       	sbci	r25, 0xFF	; 255
     898:	fc 01       	movw	r30, r24
     89a:	20 83       	st	Z, r18
	ind_buf[2+position-1] = read_byte_flash(number[CurrentTime % 600 /60 ])|(blk_dot<<IND_COM);//(!(CurrentTime%2)?(1<<IND_COM):tralala()); // +С‚РѕС‡РєР°
     89c:	88 89       	ldd	r24, Y+16	; 0x10
     89e:	88 2f       	mov	r24, r24
     8a0:	90 e0       	ldi	r25, 0x00	; 0
     8a2:	8c 01       	movw	r16, r24
     8a4:	0f 5f       	subi	r16, 0xFF	; 255
     8a6:	1f 4f       	sbci	r17, 0xFF	; 255
     8a8:	4e 85       	ldd	r20, Y+14	; 0x0e
     8aa:	5f 85       	ldd	r21, Y+15	; 0x0f
     8ac:	ca 01       	movw	r24, r20
     8ae:	96 95       	lsr	r25
     8b0:	87 95       	ror	r24
     8b2:	96 95       	lsr	r25
     8b4:	87 95       	ror	r24
     8b6:	96 95       	lsr	r25
     8b8:	87 95       	ror	r24
     8ba:	9c 01       	movw	r18, r24
     8bc:	af e4       	ldi	r26, 0x4F	; 79
     8be:	bb e1       	ldi	r27, 0x1B	; 27
     8c0:	52 d8       	rcall	.-3932   	; 0xfffff966 <__fuse+0xff7df966>
     8c2:	96 95       	lsr	r25
     8c4:	87 95       	ror	r24
     8c6:	96 95       	lsr	r25
     8c8:	87 95       	ror	r24
     8ca:	96 95       	lsr	r25
     8cc:	87 95       	ror	r24
     8ce:	68 e5       	ldi	r22, 0x58	; 88
     8d0:	72 e0       	ldi	r23, 0x02	; 2
     8d2:	86 9f       	mul	r24, r22
     8d4:	90 01       	movw	r18, r0
     8d6:	87 9f       	mul	r24, r23
     8d8:	30 0d       	add	r19, r0
     8da:	96 9f       	mul	r25, r22
     8dc:	30 0d       	add	r19, r0
     8de:	11 24       	eor	r1, r1
     8e0:	ca 01       	movw	r24, r20
     8e2:	82 1b       	sub	r24, r18
     8e4:	93 0b       	sbc	r25, r19
     8e6:	9c 01       	movw	r18, r24
     8e8:	a9 e8       	ldi	r26, 0x89	; 137
     8ea:	b8 e8       	ldi	r27, 0x88	; 136
     8ec:	3c d8       	rcall	.-3976   	; 0xfffff966 <__fuse+0xff7df966>
     8ee:	96 95       	lsr	r25
     8f0:	87 95       	ror	r24
     8f2:	92 95       	swap	r25
     8f4:	82 95       	swap	r24
     8f6:	8f 70       	andi	r24, 0x0F	; 15
     8f8:	89 27       	eor	r24, r25
     8fa:	9f 70       	andi	r25, 0x0F	; 15
     8fc:	89 27       	eor	r24, r25
     8fe:	88 0f       	add	r24, r24
     900:	99 1f       	adc	r25, r25
     902:	8e 5b       	subi	r24, 0xBE	; 190
     904:	9f 4f       	sbci	r25, 0xFF	; 255
     906:	9e 83       	std	Y+6, r25	; 0x06
     908:	8d 83       	std	Y+5, r24	; 0x05
     90a:	8d 81       	ldd	r24, Y+5	; 0x05
     90c:	9e 81       	ldd	r25, Y+6	; 0x06
     90e:	fc 01       	movw	r30, r24
     910:	f4 90       	lpm	r15, Z+
     912:	ff 82       	std	Y+7, r15	; 0x07
     914:	8f 81       	ldd	r24, Y+7	; 0x07
     916:	28 2f       	mov	r18, r24
     918:	89 81       	ldd	r24, Y+1	; 0x01
     91a:	88 2f       	mov	r24, r24
     91c:	90 e0       	ldi	r25, 0x00	; 0
     91e:	96 95       	lsr	r25
     920:	98 2f       	mov	r25, r24
     922:	88 27       	eor	r24, r24
     924:	97 95       	ror	r25
     926:	87 95       	ror	r24
     928:	82 2b       	or	r24, r18
     92a:	28 2f       	mov	r18, r24
     92c:	c8 01       	movw	r24, r16
     92e:	8d 56       	subi	r24, 0x6D	; 109
     930:	9f 4f       	sbci	r25, 0xFF	; 255
     932:	fc 01       	movw	r30, r24
     934:	20 83       	st	Z, r18
	ind_buf[1+position-1] = read_byte_flash(number[CurrentTime % 60 /10]);					// РІС‹РґРµР»СЏРµРј РґРµСЃСЏС‚РєРё СЃРµРєСѓРЅРґ 5 РјР°РєСЃРёРјР°Р»СЊРЅРѕРµ Р·РЅР°С‡РµРЅРёРµ
     936:	88 89       	ldd	r24, Y+16	; 0x10
     938:	08 2f       	mov	r16, r24
     93a:	10 e0       	ldi	r17, 0x00	; 0
     93c:	4e 85       	ldd	r20, Y+14	; 0x0e
     93e:	5f 85       	ldd	r21, Y+15	; 0x0f
     940:	9a 01       	movw	r18, r20
     942:	a9 e8       	ldi	r26, 0x89	; 137
     944:	b8 e8       	ldi	r27, 0x88	; 136
     946:	0f d8       	rcall	.-4066   	; 0xfffff966 <__fuse+0xff7df966>
     948:	96 95       	lsr	r25
     94a:	87 95       	ror	r24
     94c:	92 95       	swap	r25
     94e:	82 95       	swap	r24
     950:	8f 70       	andi	r24, 0x0F	; 15
     952:	89 27       	eor	r24, r25
     954:	9f 70       	andi	r25, 0x0F	; 15
     956:	89 27       	eor	r24, r25
     958:	6c e3       	ldi	r22, 0x3C	; 60
     95a:	68 9f       	mul	r22, r24
     95c:	90 01       	movw	r18, r0
     95e:	69 9f       	mul	r22, r25
     960:	30 0d       	add	r19, r0
     962:	11 24       	eor	r1, r1
     964:	ca 01       	movw	r24, r20
     966:	82 1b       	sub	r24, r18
     968:	93 0b       	sbc	r25, r19
     96a:	9c 01       	movw	r18, r24
     96c:	ad ec       	ldi	r26, 0xCD	; 205
     96e:	bc ec       	ldi	r27, 0xCC	; 204
     970:	fa d7       	rcall	.+4084   	; 0x1966 <__umulhisi3>
     972:	96 95       	lsr	r25
     974:	87 95       	ror	r24
     976:	96 95       	lsr	r25
     978:	87 95       	ror	r24
     97a:	96 95       	lsr	r25
     97c:	87 95       	ror	r24
     97e:	88 0f       	add	r24, r24
     980:	99 1f       	adc	r25, r25
     982:	8e 5b       	subi	r24, 0xBE	; 190
     984:	9f 4f       	sbci	r25, 0xFF	; 255
     986:	99 87       	std	Y+9, r25	; 0x09
     988:	88 87       	std	Y+8, r24	; 0x08
     98a:	88 85       	ldd	r24, Y+8	; 0x08
     98c:	99 85       	ldd	r25, Y+9	; 0x09
     98e:	fc 01       	movw	r30, r24
     990:	f4 90       	lpm	r15, Z+
     992:	fa 86       	std	Y+10, r15	; 0x0a
     994:	2a 85       	ldd	r18, Y+10	; 0x0a
     996:	c8 01       	movw	r24, r16
     998:	8d 56       	subi	r24, 0x6D	; 109
     99a:	9f 4f       	sbci	r25, 0xFF	; 255
     99c:	fc 01       	movw	r30, r24
     99e:	20 83       	st	Z, r18
	ind_buf[0+position-1] = read_byte_flash(number[CurrentTime % 10]);
     9a0:	88 89       	ldd	r24, Y+16	; 0x10
     9a2:	88 2f       	mov	r24, r24
     9a4:	90 e0       	ldi	r25, 0x00	; 0
     9a6:	8c 01       	movw	r16, r24
     9a8:	01 50       	subi	r16, 0x01	; 1
     9aa:	11 09       	sbc	r17, r1
     9ac:	4e 85       	ldd	r20, Y+14	; 0x0e
     9ae:	5f 85       	ldd	r21, Y+15	; 0x0f
     9b0:	9a 01       	movw	r18, r20
     9b2:	ad ec       	ldi	r26, 0xCD	; 205
     9b4:	bc ec       	ldi	r27, 0xCC	; 204
     9b6:	d7 d7       	rcall	.+4014   	; 0x1966 <__umulhisi3>
     9b8:	96 95       	lsr	r25
     9ba:	87 95       	ror	r24
     9bc:	96 95       	lsr	r25
     9be:	87 95       	ror	r24
     9c0:	96 95       	lsr	r25
     9c2:	87 95       	ror	r24
     9c4:	88 0f       	add	r24, r24
     9c6:	99 1f       	adc	r25, r25
     9c8:	9c 01       	movw	r18, r24
     9ca:	22 0f       	add	r18, r18
     9cc:	33 1f       	adc	r19, r19
     9ce:	22 0f       	add	r18, r18
     9d0:	33 1f       	adc	r19, r19
     9d2:	82 0f       	add	r24, r18
     9d4:	93 1f       	adc	r25, r19
     9d6:	9a 01       	movw	r18, r20
     9d8:	28 1b       	sub	r18, r24
     9da:	39 0b       	sbc	r19, r25
     9dc:	c9 01       	movw	r24, r18
     9de:	88 0f       	add	r24, r24
     9e0:	99 1f       	adc	r25, r25
     9e2:	8e 5b       	subi	r24, 0xBE	; 190
     9e4:	9f 4f       	sbci	r25, 0xFF	; 255
     9e6:	9c 87       	std	Y+12, r25	; 0x0c
     9e8:	8b 87       	std	Y+11, r24	; 0x0b
     9ea:	8b 85       	ldd	r24, Y+11	; 0x0b
     9ec:	9c 85       	ldd	r25, Y+12	; 0x0c
     9ee:	fc 01       	movw	r30, r24
     9f0:	f4 90       	lpm	r15, Z+
     9f2:	fd 86       	std	Y+13, r15	; 0x0d
     9f4:	2d 85       	ldd	r18, Y+13	; 0x0d
     9f6:	c8 01       	movw	r24, r16
     9f8:	8d 56       	subi	r24, 0x6D	; 109
     9fa:	9f 4f       	sbci	r25, 0xFF	; 255
     9fc:	fc 01       	movw	r30, r24
     9fe:	20 83       	st	Z, r18

}
     a00:	60 96       	adiw	r28, 0x10	; 16
     a02:	0f b6       	in	r0, 0x3f	; 63
     a04:	f8 94       	cli
     a06:	de bf       	out	0x3e, r29	; 62
     a08:	0f be       	out	0x3f, r0	; 63
     a0a:	cd bf       	out	0x3d, r28	; 61
     a0c:	df 91       	pop	r29
     a0e:	cf 91       	pop	r28
     a10:	1f 91       	pop	r17
     a12:	0f 91       	pop	r16
     a14:	ff 90       	pop	r15
     a16:	08 95       	ret

00000a18 <IND_Init>:
};
#endif

/******************************************************************************/
void IND_Init(void)
{
     a18:	1f 93       	push	r17
     a1a:	cf 93       	push	r28
     a1c:	df 93       	push	r29
     a1e:	cd b7       	in	r28, 0x3d	; 61
     a20:	de b7       	in	r29, 0x3e	; 62
     a22:	27 97       	sbiw	r28, 0x07	; 7
     a24:	0f b6       	in	r0, 0x3f	; 63
     a26:	f8 94       	cli
     a28:	de bf       	out	0x3e, r29	; 62
     a2a:	0f be       	out	0x3f, r0	; 63
     a2c:	cd bf       	out	0x3d, r28	; 61
  uint8_t i;
#ifndef IND_SPI_CONNECTION
  IND_PORT_SEG = (1<<IND_A)|(1<<IND_B)|(1<<IND_C)|(1<<IND_D)|(1<<IND_E)|(1<<IND_F)|(1<<IND_G)|(1<<IND_COM);
     a2e:	82 e3       	ldi	r24, 0x32	; 50
     a30:	90 e0       	ldi	r25, 0x00	; 0
     a32:	2f ef       	ldi	r18, 0xFF	; 255
     a34:	fc 01       	movw	r30, r24
     a36:	20 83       	st	Z, r18
  IND_DDR_SEG = (1<<IND_A)|(1<<IND_B)|(1<<IND_C)|(1<<IND_D)|(1<<IND_E)|(1<<IND_F)|(1<<IND_G)|(1<<IND_COM);
     a38:	81 e3       	ldi	r24, 0x31	; 49
     a3a:	90 e0       	ldi	r25, 0x00	; 0
     a3c:	2f ef       	ldi	r18, 0xFF	; 255
     a3e:	fc 01       	movw	r30, r24
     a40:	20 83       	st	Z, r18

  for(i = 0; i < IND_AMOUNT_NUM; i++){
     a42:	19 82       	std	Y+1, r1	; 0x01
     a44:	44 c0       	rjmp	.+136    	; 0xace <IND_Init+0xb6>
     IND_PORT_DIG |= (1<<read_byte_flash(digit[i]));
     a46:	88 e3       	ldi	r24, 0x38	; 56
     a48:	90 e0       	ldi	r25, 0x00	; 0
     a4a:	28 e3       	ldi	r18, 0x38	; 56
     a4c:	30 e0       	ldi	r19, 0x00	; 0
     a4e:	f9 01       	movw	r30, r18
     a50:	20 81       	ld	r18, Z
     a52:	62 2f       	mov	r22, r18
     a54:	29 81       	ldd	r18, Y+1	; 0x01
     a56:	22 2f       	mov	r18, r18
     a58:	30 e0       	ldi	r19, 0x00	; 0
     a5a:	26 58       	subi	r18, 0x86	; 134
     a5c:	3f 4f       	sbci	r19, 0xFF	; 255
     a5e:	3b 83       	std	Y+3, r19	; 0x03
     a60:	2a 83       	std	Y+2, r18	; 0x02
     a62:	2a 81       	ldd	r18, Y+2	; 0x02
     a64:	3b 81       	ldd	r19, Y+3	; 0x03
     a66:	f9 01       	movw	r30, r18
     a68:	14 91       	lpm	r17, Z+
     a6a:	1c 83       	std	Y+4, r17	; 0x04
     a6c:	2c 81       	ldd	r18, Y+4	; 0x04
     a6e:	42 2f       	mov	r20, r18
     a70:	50 e0       	ldi	r21, 0x00	; 0
     a72:	21 e0       	ldi	r18, 0x01	; 1
     a74:	30 e0       	ldi	r19, 0x00	; 0
     a76:	02 c0       	rjmp	.+4      	; 0xa7c <IND_Init+0x64>
     a78:	22 0f       	add	r18, r18
     a7a:	33 1f       	adc	r19, r19
     a7c:	4a 95       	dec	r20
     a7e:	e2 f7       	brpl	.-8      	; 0xa78 <IND_Init+0x60>
     a80:	26 2b       	or	r18, r22
     a82:	fc 01       	movw	r30, r24
     a84:	20 83       	st	Z, r18
     IND_DDR_DIG |= (1<<read_byte_flash(digit[i]));
     a86:	87 e3       	ldi	r24, 0x37	; 55
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	27 e3       	ldi	r18, 0x37	; 55
     a8c:	30 e0       	ldi	r19, 0x00	; 0
     a8e:	f9 01       	movw	r30, r18
     a90:	20 81       	ld	r18, Z
     a92:	62 2f       	mov	r22, r18
     a94:	29 81       	ldd	r18, Y+1	; 0x01
     a96:	22 2f       	mov	r18, r18
     a98:	30 e0       	ldi	r19, 0x00	; 0
     a9a:	26 58       	subi	r18, 0x86	; 134
     a9c:	3f 4f       	sbci	r19, 0xFF	; 255
     a9e:	3e 83       	std	Y+6, r19	; 0x06
     aa0:	2d 83       	std	Y+5, r18	; 0x05
     aa2:	2d 81       	ldd	r18, Y+5	; 0x05
     aa4:	3e 81       	ldd	r19, Y+6	; 0x06
     aa6:	f9 01       	movw	r30, r18
     aa8:	14 91       	lpm	r17, Z+
     aaa:	1f 83       	std	Y+7, r17	; 0x07
     aac:	2f 81       	ldd	r18, Y+7	; 0x07
     aae:	42 2f       	mov	r20, r18
     ab0:	50 e0       	ldi	r21, 0x00	; 0
     ab2:	21 e0       	ldi	r18, 0x01	; 1
     ab4:	30 e0       	ldi	r19, 0x00	; 0
     ab6:	04 2e       	mov	r0, r20
     ab8:	02 c0       	rjmp	.+4      	; 0xabe <IND_Init+0xa6>
     aba:	22 0f       	add	r18, r18
     abc:	33 1f       	adc	r19, r19
     abe:	0a 94       	dec	r0
     ac0:	e2 f7       	brpl	.-8      	; 0xaba <IND_Init+0xa2>
     ac2:	26 2b       	or	r18, r22
     ac4:	fc 01       	movw	r30, r24
     ac6:	20 83       	st	Z, r18
  uint8_t i;
#ifndef IND_SPI_CONNECTION
  IND_PORT_SEG = (1<<IND_A)|(1<<IND_B)|(1<<IND_C)|(1<<IND_D)|(1<<IND_E)|(1<<IND_F)|(1<<IND_G)|(1<<IND_COM);
  IND_DDR_SEG = (1<<IND_A)|(1<<IND_B)|(1<<IND_C)|(1<<IND_D)|(1<<IND_E)|(1<<IND_F)|(1<<IND_G)|(1<<IND_COM);

  for(i = 0; i < IND_AMOUNT_NUM; i++){
     ac8:	89 81       	ldd	r24, Y+1	; 0x01
     aca:	8f 5f       	subi	r24, 0xFF	; 255
     acc:	89 83       	std	Y+1, r24	; 0x01
     ace:	89 81       	ldd	r24, Y+1	; 0x01
     ad0:	88 30       	cpi	r24, 0x08	; 8
     ad2:	08 f4       	brcc	.+2      	; 0xad6 <IND_Init+0xbe>
     ad4:	b8 cf       	rjmp	.-144    	; 0xa46 <IND_Init+0x2e>
  }
#else
    SPI_Init();
#endif

  for(i = 0; i < IND_AMOUNT_NUM; i++) {
     ad6:	19 82       	std	Y+1, r1	; 0x01
     ad8:	0a c0       	rjmp	.+20     	; 0xaee <IND_Init+0xd6>
     ind_buf[i] = 0;
     ada:	89 81       	ldd	r24, Y+1	; 0x01
     adc:	88 2f       	mov	r24, r24
     ade:	90 e0       	ldi	r25, 0x00	; 0
     ae0:	8d 56       	subi	r24, 0x6D	; 109
     ae2:	9f 4f       	sbci	r25, 0xFF	; 255
     ae4:	fc 01       	movw	r30, r24
     ae6:	10 82       	st	Z, r1
  }
#else
    SPI_Init();
#endif

  for(i = 0; i < IND_AMOUNT_NUM; i++) {
     ae8:	89 81       	ldd	r24, Y+1	; 0x01
     aea:	8f 5f       	subi	r24, 0xFF	; 255
     aec:	89 83       	std	Y+1, r24	; 0x01
     aee:	89 81       	ldd	r24, Y+1	; 0x01
     af0:	88 30       	cpi	r24, 0x08	; 8
     af2:	98 f3       	brcs	.-26     	; 0xada <IND_Init+0xc2>
     ind_buf[i] = 0;
  }
}
     af4:	27 96       	adiw	r28, 0x07	; 7
     af6:	0f b6       	in	r0, 0x3f	; 63
     af8:	f8 94       	cli
     afa:	de bf       	out	0x3e, r29	; 62
     afc:	0f be       	out	0x3f, r0	; 63
     afe:	cd bf       	out	0x3d, r28	; 61
     b00:	df 91       	pop	r29
     b02:	cf 91       	pop	r28
     b04:	1f 91       	pop	r17
     b06:	08 95       	ret

00000b08 <IND_Output>:

/******************************************************************************/
void IND_Output(uint16_t value, uint8_t comma)
{
     b08:	1f 93       	push	r17
     b0a:	cf 93       	push	r28
     b0c:	df 93       	push	r29
     b0e:	cd b7       	in	r28, 0x3d	; 61
     b10:	de b7       	in	r29, 0x3e	; 62
     b12:	2b 97       	sbiw	r28, 0x0b	; 11
     b14:	0f b6       	in	r0, 0x3f	; 63
     b16:	f8 94       	cli
     b18:	de bf       	out	0x3e, r29	; 62
     b1a:	0f be       	out	0x3f, r0	; 63
     b1c:	cd bf       	out	0x3d, r28	; 61
     b1e:	9a 87       	std	Y+10, r25	; 0x0a
     b20:	89 87       	std	Y+9, r24	; 0x09
     b22:	6b 87       	std	Y+11, r22	; 0x0b
  uint8_t tmp;
  uint8_t i;


  for(i = 0; i < IND_AMOUNT_NUM; i++){
     b24:	19 82       	std	Y+1, r1	; 0x01
     b26:	5e c0       	rjmp	.+188    	; 0xbe4 <IND_Output+0xdc>
    tmp = value % 10;
     b28:	49 85       	ldd	r20, Y+9	; 0x09
     b2a:	5a 85       	ldd	r21, Y+10	; 0x0a
     b2c:	9a 01       	movw	r18, r20
     b2e:	ad ec       	ldi	r26, 0xCD	; 205
     b30:	bc ec       	ldi	r27, 0xCC	; 204
     b32:	19 d7       	rcall	.+3634   	; 0x1966 <__umulhisi3>
     b34:	96 95       	lsr	r25
     b36:	87 95       	ror	r24
     b38:	96 95       	lsr	r25
     b3a:	87 95       	ror	r24
     b3c:	96 95       	lsr	r25
     b3e:	87 95       	ror	r24
     b40:	88 0f       	add	r24, r24
     b42:	99 1f       	adc	r25, r25
     b44:	9c 01       	movw	r18, r24
     b46:	22 0f       	add	r18, r18
     b48:	33 1f       	adc	r19, r19
     b4a:	22 0f       	add	r18, r18
     b4c:	33 1f       	adc	r19, r19
     b4e:	82 0f       	add	r24, r18
     b50:	93 1f       	adc	r25, r19
     b52:	9a 01       	movw	r18, r20
     b54:	28 1b       	sub	r18, r24
     b56:	39 0b       	sbc	r19, r25
     b58:	c9 01       	movw	r24, r18
     b5a:	8a 83       	std	Y+2, r24	; 0x02
    if ((i == 0)||(value > 0)||(i <= comma)){
     b5c:	89 81       	ldd	r24, Y+1	; 0x01
     b5e:	88 23       	and	r24, r24
     b60:	41 f0       	breq	.+16     	; 0xb72 <IND_Output+0x6a>
     b62:	89 85       	ldd	r24, Y+9	; 0x09
     b64:	9a 85       	ldd	r25, Y+10	; 0x0a
     b66:	00 97       	sbiw	r24, 0x00	; 0
     b68:	21 f4       	brne	.+8      	; 0xb72 <IND_Output+0x6a>
     b6a:	99 81       	ldd	r25, Y+1	; 0x01
     b6c:	8b 85       	ldd	r24, Y+11	; 0x0b
     b6e:	89 17       	cp	r24, r25
     b70:	b8 f0       	brcs	.+46     	; 0xba0 <IND_Output+0x98>
       ind_buf[i] = read_byte_flash(number[tmp]);
     b72:	89 81       	ldd	r24, Y+1	; 0x01
     b74:	88 2f       	mov	r24, r24
     b76:	90 e0       	ldi	r25, 0x00	; 0
     b78:	2a 81       	ldd	r18, Y+2	; 0x02
     b7a:	22 2f       	mov	r18, r18
     b7c:	30 e0       	ldi	r19, 0x00	; 0
     b7e:	22 0f       	add	r18, r18
     b80:	33 1f       	adc	r19, r19
     b82:	2e 5b       	subi	r18, 0xBE	; 190
     b84:	3f 4f       	sbci	r19, 0xFF	; 255
     b86:	3f 83       	std	Y+7, r19	; 0x07
     b88:	2e 83       	std	Y+6, r18	; 0x06
     b8a:	2e 81       	ldd	r18, Y+6	; 0x06
     b8c:	3f 81       	ldd	r19, Y+7	; 0x07
     b8e:	f9 01       	movw	r30, r18
     b90:	14 91       	lpm	r17, Z+
     b92:	18 87       	std	Y+8, r17	; 0x08
     b94:	28 85       	ldd	r18, Y+8	; 0x08
     b96:	8d 56       	subi	r24, 0x6D	; 109
     b98:	9f 4f       	sbci	r25, 0xFF	; 255
     b9a:	fc 01       	movw	r30, r24
     b9c:	20 83       	st	Z, r18
     b9e:	11 c0       	rjmp	.+34     	; 0xbc2 <IND_Output+0xba>
    }
    else{
       ind_buf[i] = read_byte_flash(number[IND_EMPTY_NUM]);
     ba0:	89 81       	ldd	r24, Y+1	; 0x01
     ba2:	88 2f       	mov	r24, r24
     ba4:	90 e0       	ldi	r25, 0x00	; 0
     ba6:	26 e5       	ldi	r18, 0x56	; 86
     ba8:	30 e0       	ldi	r19, 0x00	; 0
     baa:	3c 83       	std	Y+4, r19	; 0x04
     bac:	2b 83       	std	Y+3, r18	; 0x03
     bae:	2b 81       	ldd	r18, Y+3	; 0x03
     bb0:	3c 81       	ldd	r19, Y+4	; 0x04
     bb2:	f9 01       	movw	r30, r18
     bb4:	14 91       	lpm	r17, Z+
     bb6:	1d 83       	std	Y+5, r17	; 0x05
     bb8:	2d 81       	ldd	r18, Y+5	; 0x05
     bba:	8d 56       	subi	r24, 0x6D	; 109
     bbc:	9f 4f       	sbci	r25, 0xFF	; 255
     bbe:	fc 01       	movw	r30, r24
     bc0:	20 83       	st	Z, r18
    }
    value = value/10;
     bc2:	89 85       	ldd	r24, Y+9	; 0x09
     bc4:	9a 85       	ldd	r25, Y+10	; 0x0a
     bc6:	9c 01       	movw	r18, r24
     bc8:	ad ec       	ldi	r26, 0xCD	; 205
     bca:	bc ec       	ldi	r27, 0xCC	; 204
     bcc:	cc d6       	rcall	.+3480   	; 0x1966 <__umulhisi3>
     bce:	96 95       	lsr	r25
     bd0:	87 95       	ror	r24
     bd2:	96 95       	lsr	r25
     bd4:	87 95       	ror	r24
     bd6:	96 95       	lsr	r25
     bd8:	87 95       	ror	r24
     bda:	9a 87       	std	Y+10, r25	; 0x0a
     bdc:	89 87       	std	Y+9, r24	; 0x09
{
  uint8_t tmp;
  uint8_t i;


  for(i = 0; i < IND_AMOUNT_NUM; i++){
     bde:	89 81       	ldd	r24, Y+1	; 0x01
     be0:	8f 5f       	subi	r24, 0xFF	; 255
     be2:	89 83       	std	Y+1, r24	; 0x01
     be4:	89 81       	ldd	r24, Y+1	; 0x01
     be6:	88 30       	cpi	r24, 0x08	; 8
     be8:	08 f4       	brcc	.+2      	; 0xbec <IND_Output+0xe4>
     bea:	9e cf       	rjmp	.-196    	; 0xb28 <IND_Output+0x20>
       ind_buf[i] = read_byte_flash(number[IND_EMPTY_NUM]);
    }
    value = value/10;
  }

  if ((comma <= IND_AMOUNT_NUM) && (comma != 0)) {
     bec:	8b 85       	ldd	r24, Y+11	; 0x0b
     bee:	89 30       	cpi	r24, 0x09	; 9
     bf0:	a8 f4       	brcc	.+42     	; 0xc1c <IND_Output+0x114>
     bf2:	8b 85       	ldd	r24, Y+11	; 0x0b
     bf4:	88 23       	and	r24, r24
     bf6:	91 f0       	breq	.+36     	; 0xc1c <IND_Output+0x114>
    ind_buf[comma-1] |= 1<<IND_COM;
     bf8:	8b 85       	ldd	r24, Y+11	; 0x0b
     bfa:	88 2f       	mov	r24, r24
     bfc:	90 e0       	ldi	r25, 0x00	; 0
     bfe:	01 97       	sbiw	r24, 0x01	; 1
     c00:	2b 85       	ldd	r18, Y+11	; 0x0b
     c02:	22 2f       	mov	r18, r18
     c04:	30 e0       	ldi	r19, 0x00	; 0
     c06:	21 50       	subi	r18, 0x01	; 1
     c08:	31 09       	sbc	r19, r1
     c0a:	2d 56       	subi	r18, 0x6D	; 109
     c0c:	3f 4f       	sbci	r19, 0xFF	; 255
     c0e:	f9 01       	movw	r30, r18
     c10:	20 81       	ld	r18, Z
     c12:	20 68       	ori	r18, 0x80	; 128
     c14:	8d 56       	subi	r24, 0x6D	; 109
     c16:	9f 4f       	sbci	r25, 0xFF	; 255
     c18:	fc 01       	movw	r30, r24
     c1a:	20 83       	st	Z, r18
  }
}
     c1c:	2b 96       	adiw	r28, 0x0b	; 11
     c1e:	0f b6       	in	r0, 0x3f	; 63
     c20:	f8 94       	cli
     c22:	de bf       	out	0x3e, r29	; 62
     c24:	0f be       	out	0x3f, r0	; 63
     c26:	cd bf       	out	0x3d, r28	; 61
     c28:	df 91       	pop	r29
     c2a:	cf 91       	pop	r28
     c2c:	1f 91       	pop	r17
     c2e:	08 95       	ret

00000c30 <IND_OutputFormat>:

/******************************************************************************/
void IND_OutputFormat(uint16_t value, uint8_t comma, uint8_t position, uint8_t amount)
{
     c30:	1f 93       	push	r17
     c32:	cf 93       	push	r28
     c34:	df 93       	push	r29
     c36:	cd b7       	in	r28, 0x3d	; 61
     c38:	de b7       	in	r29, 0x3e	; 62
     c3a:	2d 97       	sbiw	r28, 0x0d	; 13
     c3c:	0f b6       	in	r0, 0x3f	; 63
     c3e:	f8 94       	cli
     c40:	de bf       	out	0x3e, r29	; 62
     c42:	0f be       	out	0x3f, r0	; 63
     c44:	cd bf       	out	0x3d, r28	; 61
     c46:	9a 87       	std	Y+10, r25	; 0x0a
     c48:	89 87       	std	Y+9, r24	; 0x09
     c4a:	6b 87       	std	Y+11, r22	; 0x0b
     c4c:	4c 87       	std	Y+12, r20	; 0x0c
     c4e:	2d 87       	std	Y+13, r18	; 0x0d
  uint8_t tmp;
  uint8_t i;

  if ((position <= IND_AMOUNT_NUM)&&(position != 0)){
     c50:	8c 85       	ldd	r24, Y+12	; 0x0c
     c52:	89 30       	cpi	r24, 0x09	; 9
     c54:	08 f0       	brcs	.+2      	; 0xc58 <IND_OutputFormat+0x28>
     c56:	73 c0       	rjmp	.+230    	; 0xd3e <IND_OutputFormat+0x10e>
     c58:	8c 85       	ldd	r24, Y+12	; 0x0c
     c5a:	88 23       	and	r24, r24
     c5c:	09 f4       	brne	.+2      	; 0xc60 <IND_OutputFormat+0x30>
     c5e:	6f c0       	rjmp	.+222    	; 0xd3e <IND_OutputFormat+0x10e>
     for(i = 0; i < amount; i++){
     c60:	19 82       	std	Y+1, r1	; 0x01
     c62:	66 c0       	rjmp	.+204    	; 0xd30 <IND_OutputFormat+0x100>
        tmp = value % 10;
     c64:	49 85       	ldd	r20, Y+9	; 0x09
     c66:	5a 85       	ldd	r21, Y+10	; 0x0a
     c68:	9a 01       	movw	r18, r20
     c6a:	ad ec       	ldi	r26, 0xCD	; 205
     c6c:	bc ec       	ldi	r27, 0xCC	; 204
     c6e:	7b d6       	rcall	.+3318   	; 0x1966 <__umulhisi3>
     c70:	96 95       	lsr	r25
     c72:	87 95       	ror	r24
     c74:	96 95       	lsr	r25
     c76:	87 95       	ror	r24
     c78:	96 95       	lsr	r25
     c7a:	87 95       	ror	r24
     c7c:	88 0f       	add	r24, r24
     c7e:	99 1f       	adc	r25, r25
     c80:	9c 01       	movw	r18, r24
     c82:	22 0f       	add	r18, r18
     c84:	33 1f       	adc	r19, r19
     c86:	22 0f       	add	r18, r18
     c88:	33 1f       	adc	r19, r19
     c8a:	82 0f       	add	r24, r18
     c8c:	93 1f       	adc	r25, r19
     c8e:	9a 01       	movw	r18, r20
     c90:	28 1b       	sub	r18, r24
     c92:	39 0b       	sbc	r19, r25
     c94:	c9 01       	movw	r24, r18
     c96:	8a 83       	std	Y+2, r24	; 0x02
        if ((i == 0)||(value > 0)||(position <= comma)){
     c98:	89 81       	ldd	r24, Y+1	; 0x01
     c9a:	88 23       	and	r24, r24
     c9c:	41 f0       	breq	.+16     	; 0xcae <IND_OutputFormat+0x7e>
     c9e:	89 85       	ldd	r24, Y+9	; 0x09
     ca0:	9a 85       	ldd	r25, Y+10	; 0x0a
     ca2:	00 97       	sbiw	r24, 0x00	; 0
     ca4:	21 f4       	brne	.+8      	; 0xcae <IND_OutputFormat+0x7e>
     ca6:	9c 85       	ldd	r25, Y+12	; 0x0c
     ca8:	8b 85       	ldd	r24, Y+11	; 0x0b
     caa:	89 17       	cp	r24, r25
     cac:	c0 f0       	brcs	.+48     	; 0xcde <IND_OutputFormat+0xae>
           ind_buf[position-1] = read_byte_flash(number[tmp]);
     cae:	8c 85       	ldd	r24, Y+12	; 0x0c
     cb0:	88 2f       	mov	r24, r24
     cb2:	90 e0       	ldi	r25, 0x00	; 0
     cb4:	01 97       	sbiw	r24, 0x01	; 1
     cb6:	2a 81       	ldd	r18, Y+2	; 0x02
     cb8:	22 2f       	mov	r18, r18
     cba:	30 e0       	ldi	r19, 0x00	; 0
     cbc:	22 0f       	add	r18, r18
     cbe:	33 1f       	adc	r19, r19
     cc0:	2e 5b       	subi	r18, 0xBE	; 190
     cc2:	3f 4f       	sbci	r19, 0xFF	; 255
     cc4:	3f 83       	std	Y+7, r19	; 0x07
     cc6:	2e 83       	std	Y+6, r18	; 0x06
     cc8:	2e 81       	ldd	r18, Y+6	; 0x06
     cca:	3f 81       	ldd	r19, Y+7	; 0x07
     ccc:	f9 01       	movw	r30, r18
     cce:	14 91       	lpm	r17, Z+
     cd0:	18 87       	std	Y+8, r17	; 0x08
     cd2:	28 85       	ldd	r18, Y+8	; 0x08
     cd4:	8d 56       	subi	r24, 0x6D	; 109
     cd6:	9f 4f       	sbci	r25, 0xFF	; 255
     cd8:	fc 01       	movw	r30, r24
     cda:	20 83       	st	Z, r18
     cdc:	12 c0       	rjmp	.+36     	; 0xd02 <IND_OutputFormat+0xd2>
        }
        else{
           ind_buf[position-1] = read_byte_flash(number[IND_EMPTY_NUM]);
     cde:	8c 85       	ldd	r24, Y+12	; 0x0c
     ce0:	88 2f       	mov	r24, r24
     ce2:	90 e0       	ldi	r25, 0x00	; 0
     ce4:	01 97       	sbiw	r24, 0x01	; 1
     ce6:	26 e5       	ldi	r18, 0x56	; 86
     ce8:	30 e0       	ldi	r19, 0x00	; 0
     cea:	3c 83       	std	Y+4, r19	; 0x04
     cec:	2b 83       	std	Y+3, r18	; 0x03
     cee:	2b 81       	ldd	r18, Y+3	; 0x03
     cf0:	3c 81       	ldd	r19, Y+4	; 0x04
     cf2:	f9 01       	movw	r30, r18
     cf4:	14 91       	lpm	r17, Z+
     cf6:	1d 83       	std	Y+5, r17	; 0x05
     cf8:	2d 81       	ldd	r18, Y+5	; 0x05
     cfa:	8d 56       	subi	r24, 0x6D	; 109
     cfc:	9f 4f       	sbci	r25, 0xFF	; 255
     cfe:	fc 01       	movw	r30, r24
     d00:	20 83       	st	Z, r18
        }
        value = value/10;
     d02:	89 85       	ldd	r24, Y+9	; 0x09
     d04:	9a 85       	ldd	r25, Y+10	; 0x0a
     d06:	9c 01       	movw	r18, r24
     d08:	ad ec       	ldi	r26, 0xCD	; 205
     d0a:	bc ec       	ldi	r27, 0xCC	; 204
     d0c:	2c d6       	rcall	.+3160   	; 0x1966 <__umulhisi3>
     d0e:	96 95       	lsr	r25
     d10:	87 95       	ror	r24
     d12:	96 95       	lsr	r25
     d14:	87 95       	ror	r24
     d16:	96 95       	lsr	r25
     d18:	87 95       	ror	r24
     d1a:	9a 87       	std	Y+10, r25	; 0x0a
     d1c:	89 87       	std	Y+9, r24	; 0x09
        position++;
     d1e:	8c 85       	ldd	r24, Y+12	; 0x0c
     d20:	8f 5f       	subi	r24, 0xFF	; 255
     d22:	8c 87       	std	Y+12, r24	; 0x0c
        if (position > IND_AMOUNT_NUM){
     d24:	8c 85       	ldd	r24, Y+12	; 0x0c
     d26:	89 30       	cpi	r24, 0x09	; 9
     d28:	48 f4       	brcc	.+18     	; 0xd3c <IND_OutputFormat+0x10c>
{
  uint8_t tmp;
  uint8_t i;

  if ((position <= IND_AMOUNT_NUM)&&(position != 0)){
     for(i = 0; i < amount; i++){
     d2a:	89 81       	ldd	r24, Y+1	; 0x01
     d2c:	8f 5f       	subi	r24, 0xFF	; 255
     d2e:	89 83       	std	Y+1, r24	; 0x01
     d30:	99 81       	ldd	r25, Y+1	; 0x01
     d32:	8d 85       	ldd	r24, Y+13	; 0x0d
     d34:	98 17       	cp	r25, r24
     d36:	08 f4       	brcc	.+2      	; 0xd3a <IND_OutputFormat+0x10a>
     d38:	95 cf       	rjmp	.-214    	; 0xc64 <IND_OutputFormat+0x34>
     d3a:	01 c0       	rjmp	.+2      	; 0xd3e <IND_OutputFormat+0x10e>
           ind_buf[position-1] = read_byte_flash(number[IND_EMPTY_NUM]);
        }
        value = value/10;
        position++;
        if (position > IND_AMOUNT_NUM){
           break;
     d3c:	00 00       	nop
        }
     }
  }

  if ((comma <= IND_AMOUNT_NUM) && (comma != 0)) {
     d3e:	8b 85       	ldd	r24, Y+11	; 0x0b
     d40:	89 30       	cpi	r24, 0x09	; 9
     d42:	a8 f4       	brcc	.+42     	; 0xd6e <IND_OutputFormat+0x13e>
     d44:	8b 85       	ldd	r24, Y+11	; 0x0b
     d46:	88 23       	and	r24, r24
     d48:	91 f0       	breq	.+36     	; 0xd6e <IND_OutputFormat+0x13e>
    ind_buf[comma-1] |= 1<<IND_COM;
     d4a:	8b 85       	ldd	r24, Y+11	; 0x0b
     d4c:	88 2f       	mov	r24, r24
     d4e:	90 e0       	ldi	r25, 0x00	; 0
     d50:	01 97       	sbiw	r24, 0x01	; 1
     d52:	2b 85       	ldd	r18, Y+11	; 0x0b
     d54:	22 2f       	mov	r18, r18
     d56:	30 e0       	ldi	r19, 0x00	; 0
     d58:	21 50       	subi	r18, 0x01	; 1
     d5a:	31 09       	sbc	r19, r1
     d5c:	2d 56       	subi	r18, 0x6D	; 109
     d5e:	3f 4f       	sbci	r19, 0xFF	; 255
     d60:	f9 01       	movw	r30, r18
     d62:	20 81       	ld	r18, Z
     d64:	20 68       	ori	r18, 0x80	; 128
     d66:	8d 56       	subi	r24, 0x6D	; 109
     d68:	9f 4f       	sbci	r25, 0xFF	; 255
     d6a:	fc 01       	movw	r30, r24
     d6c:	20 83       	st	Z, r18
  }
}
     d6e:	2d 96       	adiw	r28, 0x0d	; 13
     d70:	0f b6       	in	r0, 0x3f	; 63
     d72:	f8 94       	cli
     d74:	de bf       	out	0x3e, r29	; 62
     d76:	0f be       	out	0x3f, r0	; 63
     d78:	cd bf       	out	0x3d, r28	; 61
     d7a:	df 91       	pop	r29
     d7c:	cf 91       	pop	r28
     d7e:	1f 91       	pop	r17
     d80:	08 95       	ret

00000d82 <IND_Update>:

/******************************************************************************/
void IND_Update(void)
{
     d82:	1f 93       	push	r17
     d84:	cf 93       	push	r28
     d86:	df 93       	push	r29
     d88:	cd b7       	in	r28, 0x3d	; 61
     d8a:	de b7       	in	r29, 0x3e	; 62
     d8c:	28 97       	sbiw	r28, 0x08	; 8
     d8e:	0f b6       	in	r0, 0x3f	; 63
     d90:	f8 94       	cli
     d92:	de bf       	out	0x3e, r29	; 62
     d94:	0f be       	out	0x3f, r0	; 63
     d96:	cd bf       	out	0x3d, r28	; 61
 /*____________________РѕР±С‹С‡РЅРѕРµ РїРѕРґРєР»СЋС‡РµРЅРёРµ____________________________*/

 uint8_t tmp;

 /*РіР°СЃРёРј РІСЃРµ РёРЅРґРёРєР°С‚РѕСЂС‹*/
 IND_LightOutSeg(IND_PORT_SEG, IND_LIGHT_OUT);
     d98:	82 e3       	ldi	r24, 0x32	; 50
     d9a:	90 e0       	ldi	r25, 0x00	; 0
     d9c:	fc 01       	movw	r30, r24
     d9e:	80 81       	ld	r24, Z
     da0:	82 e3       	ldi	r24, 0x32	; 50
     da2:	90 e0       	ldi	r25, 0x00	; 0
     da4:	2f ef       	ldi	r18, 0xFF	; 255
     da6:	fc 01       	movw	r30, r24
     da8:	20 83       	st	Z, r18

 tmp = 0;
     daa:	1a 82       	std	Y+2, r1	; 0x02
 for (i = 0; i < IND_AMOUNT_NUM; i++){
     dac:	19 82       	std	Y+1, r1	; 0x01
     dae:	1e c0       	rjmp	.+60     	; 0xdec <IND_Update+0x6a>
    tmp |= (1<<read_byte_flash(digit[i]));
     db0:	89 81       	ldd	r24, Y+1	; 0x01
     db2:	88 2f       	mov	r24, r24
     db4:	90 e0       	ldi	r25, 0x00	; 0
     db6:	86 58       	subi	r24, 0x86	; 134
     db8:	9f 4f       	sbci	r25, 0xFF	; 255
     dba:	9c 83       	std	Y+4, r25	; 0x04
     dbc:	8b 83       	std	Y+3, r24	; 0x03
     dbe:	8b 81       	ldd	r24, Y+3	; 0x03
     dc0:	9c 81       	ldd	r25, Y+4	; 0x04
     dc2:	fc 01       	movw	r30, r24
     dc4:	14 91       	lpm	r17, Z+
     dc6:	1d 83       	std	Y+5, r17	; 0x05
     dc8:	8d 81       	ldd	r24, Y+5	; 0x05
     dca:	28 2f       	mov	r18, r24
     dcc:	30 e0       	ldi	r19, 0x00	; 0
     dce:	81 e0       	ldi	r24, 0x01	; 1
     dd0:	90 e0       	ldi	r25, 0x00	; 0
     dd2:	02 2e       	mov	r0, r18
     dd4:	02 c0       	rjmp	.+4      	; 0xdda <IND_Update+0x58>
     dd6:	88 0f       	add	r24, r24
     dd8:	99 1f       	adc	r25, r25
     dda:	0a 94       	dec	r0
     ddc:	e2 f7       	brpl	.-8      	; 0xdd6 <IND_Update+0x54>
     dde:	98 2f       	mov	r25, r24
     de0:	8a 81       	ldd	r24, Y+2	; 0x02
     de2:	89 2b       	or	r24, r25
     de4:	8a 83       	std	Y+2, r24	; 0x02

 /*РіР°СЃРёРј РІСЃРµ РёРЅРґРёРєР°С‚РѕСЂС‹*/
 IND_LightOutSeg(IND_PORT_SEG, IND_LIGHT_OUT);

 tmp = 0;
 for (i = 0; i < IND_AMOUNT_NUM; i++){
     de6:	89 81       	ldd	r24, Y+1	; 0x01
     de8:	8f 5f       	subi	r24, 0xFF	; 255
     dea:	89 83       	std	Y+1, r24	; 0x01
     dec:	89 81       	ldd	r24, Y+1	; 0x01
     dee:	88 30       	cpi	r24, 0x08	; 8
     df0:	f8 f2       	brcs	.-66     	; 0xdb0 <IND_Update+0x2e>
    tmp |= (1<<read_byte_flash(digit[i]));
 }
 IND_LightOutDig(IND_PORT_DIG, tmp);
     df2:	88 e3       	ldi	r24, 0x38	; 56
     df4:	90 e0       	ldi	r25, 0x00	; 0
     df6:	28 e3       	ldi	r18, 0x38	; 56
     df8:	30 e0       	ldi	r19, 0x00	; 0
     dfa:	f9 01       	movw	r30, r18
     dfc:	20 81       	ld	r18, Z
     dfe:	32 2f       	mov	r19, r18
     e00:	2a 81       	ldd	r18, Y+2	; 0x02
     e02:	20 95       	com	r18
     e04:	23 23       	and	r18, r19
     e06:	fc 01       	movw	r30, r24
     e08:	20 83       	st	Z, r18
  count &= 0x07;

 #else
 /*____________СЂРµР°Р»РёР·Р°С†Рё РїРѕСЂР°Р·СЂСЏРґРЅРѕР№ СЂР°Р·РІРµСЂС‚РєРё____________*/

  IND_OutDig(IND_PORT_DIG, (1<<read_byte_flash(digit[count])));
     e0a:	88 e3       	ldi	r24, 0x38	; 56
     e0c:	90 e0       	ldi	r25, 0x00	; 0
     e0e:	28 e3       	ldi	r18, 0x38	; 56
     e10:	30 e0       	ldi	r19, 0x00	; 0
     e12:	f9 01       	movw	r30, r18
     e14:	20 81       	ld	r18, Z
     e16:	62 2f       	mov	r22, r18
     e18:	20 91 7f 00 	lds	r18, 0x007F
     e1c:	22 2f       	mov	r18, r18
     e1e:	30 e0       	ldi	r19, 0x00	; 0
     e20:	26 58       	subi	r18, 0x86	; 134
     e22:	3f 4f       	sbci	r19, 0xFF	; 255
     e24:	3f 83       	std	Y+7, r19	; 0x07
     e26:	2e 83       	std	Y+6, r18	; 0x06
     e28:	2e 81       	ldd	r18, Y+6	; 0x06
     e2a:	3f 81       	ldd	r19, Y+7	; 0x07
     e2c:	f9 01       	movw	r30, r18
     e2e:	14 91       	lpm	r17, Z+
     e30:	18 87       	std	Y+8, r17	; 0x08
     e32:	28 85       	ldd	r18, Y+8	; 0x08
     e34:	42 2f       	mov	r20, r18
     e36:	50 e0       	ldi	r21, 0x00	; 0
     e38:	21 e0       	ldi	r18, 0x01	; 1
     e3a:	30 e0       	ldi	r19, 0x00	; 0
     e3c:	02 c0       	rjmp	.+4      	; 0xe42 <IND_Update+0xc0>
     e3e:	22 0f       	add	r18, r18
     e40:	33 1f       	adc	r19, r19
     e42:	4a 95       	dec	r20
     e44:	e2 f7       	brpl	.-8      	; 0xe3e <IND_Update+0xbc>
     e46:	26 2b       	or	r18, r22
     e48:	fc 01       	movw	r30, r24
     e4a:	20 83       	st	Z, r18
  IND_OutSeg(IND_PORT_SEG, ind_buf[count]);
     e4c:	82 e3       	ldi	r24, 0x32	; 50
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	22 e3       	ldi	r18, 0x32	; 50
     e52:	30 e0       	ldi	r19, 0x00	; 0
     e54:	f9 01       	movw	r30, r18
     e56:	20 81       	ld	r18, Z
     e58:	42 2f       	mov	r20, r18
     e5a:	20 91 7f 00 	lds	r18, 0x007F
     e5e:	22 2f       	mov	r18, r18
     e60:	30 e0       	ldi	r19, 0x00	; 0
     e62:	2d 56       	subi	r18, 0x6D	; 109
     e64:	3f 4f       	sbci	r19, 0xFF	; 255
     e66:	f9 01       	movw	r30, r18
     e68:	20 81       	ld	r18, Z
     e6a:	20 95       	com	r18
     e6c:	24 23       	and	r18, r20
     e6e:	fc 01       	movw	r30, r24
     e70:	20 83       	st	Z, r18

  count++;
     e72:	80 91 7f 00 	lds	r24, 0x007F
     e76:	8f 5f       	subi	r24, 0xFF	; 255
     e78:	80 93 7f 00 	sts	0x007F, r24
  if (count >= IND_AMOUNT_NUM){
     e7c:	80 91 7f 00 	lds	r24, 0x007F
     e80:	88 30       	cpi	r24, 0x08	; 8
     e82:	10 f0       	brcs	.+4      	; 0xe88 <IND_Update+0x106>
     count = 0;
     e84:	10 92 7f 00 	sts	0x007F, r1
  }
 #endif
#endif
    AddTask(IND_Update,5);
     e88:	65 e0       	ldi	r22, 0x05	; 5
     e8a:	70 e0       	ldi	r23, 0x00	; 0
     e8c:	81 ec       	ldi	r24, 0xC1	; 193
     e8e:	96 e0       	ldi	r25, 0x06	; 6
     e90:	8b d1       	rcall	.+790    	; 0x11a8 <AddTask>
}
     e92:	28 96       	adiw	r28, 0x08	; 8
     e94:	0f b6       	in	r0, 0x3f	; 63
     e96:	f8 94       	cli
     e98:	de bf       	out	0x3e, r29	; 62
     e9a:	0f be       	out	0x3f, r0	; 63
     e9c:	cd bf       	out	0x3d, r28	; 61
     e9e:	df 91       	pop	r29
     ea0:	cf 91       	pop	r28
     ea2:	1f 91       	pop	r17
     ea4:	08 95       	ret

00000ea6 <InitControl>:

}
//*/
//#include "kbd.h"
//*
void InitControl(){
     ea6:	cf 93       	push	r28
     ea8:	df 93       	push	r29
     eaa:	cd b7       	in	r28, 0x3d	; 61
     eac:	de b7       	in	r29, 0x3e	; 62
	DDRC=0b00111000;
     eae:	84 e3       	ldi	r24, 0x34	; 52
     eb0:	90 e0       	ldi	r25, 0x00	; 0
     eb2:	28 e3       	ldi	r18, 0x38	; 56
     eb4:	fc 01       	movw	r30, r24
     eb6:	20 83       	st	Z, r18
	//DDRA |= (1 << PC1)|(1 << PC2)|(1 << PC3)|(1 << PC4)|(1 << PC5)|(1 << PC6);
	PORTC=0b00000111;
     eb8:	85 e3       	ldi	r24, 0x35	; 53
     eba:	90 e0       	ldi	r25, 0x00	; 0
     ebc:	27 e0       	ldi	r18, 0x07	; 7
     ebe:	fc 01       	movw	r30, r24
     ec0:	20 83       	st	Z, r18
}
     ec2:	df 91       	pop	r29
     ec4:	cf 91       	pop	r28
     ec6:	08 95       	ret

00000ec8 <KeyCode>:
//*/
//*
uint8_t KeyCode(){
     ec8:	cf 93       	push	r28
     eca:	df 93       	push	r29
     ecc:	cd b7       	in	r28, 0x3d	; 61
     ece:	de b7       	in	r29, 0x3e	; 62

    return (flags.KeyPin);
     ed0:	80 91 90 00 	lds	r24, 0x0090
     ed4:	82 95       	swap	r24
     ed6:	86 95       	lsr	r24
     ed8:	87 70       	andi	r24, 0x07	; 7
     eda:	90 91 91 00 	lds	r25, 0x0091
     ede:	91 70       	andi	r25, 0x01	; 1
     ee0:	99 0f       	add	r25, r25
     ee2:	99 0f       	add	r25, r25
     ee4:	99 0f       	add	r25, r25
     ee6:	89 2b       	or	r24, r25
    }
     ee8:	df 91       	pop	r29
     eea:	cf 91       	pop	r28
     eec:	08 95       	ret

00000eee <KeyState>:
//*/
void KeyState(){
     eee:	cf 93       	push	r28
     ef0:	df 93       	push	r29
     ef2:	cd b7       	in	r28, 0x3d	; 61
     ef4:	de b7       	in	r29, 0x3e	; 62

    if (((flags.KeyPressed)&&(flags.KeyReleased))||((flags.KeyPressed)&&(flags.KeyPushLong))){
     ef6:	80 91 90 00 	lds	r24, 0x0090
     efa:	86 95       	lsr	r24
     efc:	81 70       	andi	r24, 0x01	; 1
     efe:	88 23       	and	r24, r24
     f00:	39 f0       	breq	.+14     	; 0xf10 <KeyState+0x22>
     f02:	80 91 90 00 	lds	r24, 0x0090
     f06:	82 fb       	bst	r24, 2
     f08:	88 27       	eor	r24, r24
     f0a:	80 f9       	bld	r24, 0
     f0c:	88 23       	and	r24, r24
     f0e:	71 f4       	brne	.+28     	; 0xf2c <KeyState+0x3e>
     f10:	80 91 90 00 	lds	r24, 0x0090
     f14:	86 95       	lsr	r24
     f16:	81 70       	andi	r24, 0x01	; 1
     f18:	88 23       	and	r24, r24
     f1a:	09 f4       	brne	.+2      	; 0xf1e <KeyState+0x30>
     f1c:	41 c0       	rjmp	.+130    	; 0xfa0 <KeyState+0xb2>
     f1e:	80 91 90 00 	lds	r24, 0x0090
     f22:	83 fb       	bst	r24, 3
     f24:	88 27       	eor	r24, r24
     f26:	80 f9       	bld	r24, 0
     f28:	88 23       	and	r24, r24
     f2a:	d1 f1       	breq	.+116    	; 0xfa0 <KeyState+0xb2>
        flags.KeyPressed=0;
     f2c:	80 91 90 00 	lds	r24, 0x0090
     f30:	8d 7f       	andi	r24, 0xFD	; 253
     f32:	80 93 90 00 	sts	0x0090, r24
        if (flags.KeyPushLong){
     f36:	80 91 90 00 	lds	r24, 0x0090
     f3a:	83 fb       	bst	r24, 3
     f3c:	88 27       	eor	r24, r24
     f3e:	80 f9       	bld	r24, 0
     f40:	88 23       	and	r24, r24
     f42:	21 f1       	breq	.+72     	; 0xf8c <KeyState+0x9e>
            flags.KeyPin+=8;
     f44:	80 91 90 00 	lds	r24, 0x0090
     f48:	82 95       	swap	r24
     f4a:	86 95       	lsr	r24
     f4c:	87 70       	andi	r24, 0x07	; 7
     f4e:	90 91 91 00 	lds	r25, 0x0091
     f52:	91 70       	andi	r25, 0x01	; 1
     f54:	99 0f       	add	r25, r25
     f56:	99 0f       	add	r25, r25
     f58:	99 0f       	add	r25, r25
     f5a:	89 2b       	or	r24, r25
     f5c:	88 5f       	subi	r24, 0xF8	; 248
     f5e:	8f 70       	andi	r24, 0x0F	; 15
     f60:	98 2f       	mov	r25, r24
     f62:	97 70       	andi	r25, 0x07	; 7
     f64:	92 95       	swap	r25
     f66:	99 0f       	add	r25, r25
     f68:	90 7e       	andi	r25, 0xE0	; 224
     f6a:	20 91 90 00 	lds	r18, 0x0090
     f6e:	2f 71       	andi	r18, 0x1F	; 31
     f70:	92 2b       	or	r25, r18
     f72:	90 93 90 00 	sts	0x0090, r25
     f76:	86 95       	lsr	r24
     f78:	86 95       	lsr	r24
     f7a:	86 95       	lsr	r24
     f7c:	81 70       	andi	r24, 0x01	; 1
     f7e:	81 70       	andi	r24, 0x01	; 1
     f80:	90 91 91 00 	lds	r25, 0x0091
     f84:	9e 7f       	andi	r25, 0xFE	; 254
     f86:	89 2b       	or	r24, r25
     f88:	80 93 91 00 	sts	0x0091, r24
            //flags.KeyPushLong=0;
        }
        flags.KeyPushLong=0;
     f8c:	80 91 90 00 	lds	r24, 0x0090
     f90:	87 7f       	andi	r24, 0xF7	; 247
     f92:	80 93 90 00 	sts	0x0090, r24
        flags.State_Automate=1;
     f96:	80 91 90 00 	lds	r24, 0x0090
     f9a:	81 60       	ori	r24, 0x01	; 1
     f9c:	80 93 90 00 	sts	0x0090, r24
    }
    flags.KeyReleased=1;
     fa0:	80 91 90 00 	lds	r24, 0x0090
     fa4:	84 60       	ori	r24, 0x04	; 4
     fa6:	80 93 90 00 	sts	0x0090, r24
    KeyCurrentCode=flags.KeyPin;
     faa:	80 91 90 00 	lds	r24, 0x0090
     fae:	82 95       	swap	r24
     fb0:	86 95       	lsr	r24
     fb2:	87 70       	andi	r24, 0x07	; 7
     fb4:	90 91 91 00 	lds	r25, 0x0091
     fb8:	91 70       	andi	r25, 0x01	; 1
     fba:	99 0f       	add	r25, r25
     fbc:	99 0f       	add	r25, r25
     fbe:	99 0f       	add	r25, r25
     fc0:	89 2b       	or	r24, r25
     fc2:	88 2f       	mov	r24, r24
     fc4:	90 e0       	ldi	r25, 0x00	; 0
     fc6:	90 93 c0 00 	sts	0x00C0, r25
     fca:	80 93 bf 00 	sts	0x00BF, r24
  //  flags.State_Automate=1;
 //   AddTask(StateAutomate,5,0);
 //   *KeyCodePointer = &KeyCurrentCode;
}
     fce:	df 91       	pop	r29
     fd0:	cf 91       	pop	r28
     fd2:	08 95       	ret

00000fd4 <KeyScan>:

void KeyScan(){
     fd4:	cf 93       	push	r28
     fd6:	df 93       	push	r29
     fd8:	cd b7       	in	r28, 0x3d	; 61
     fda:	de b7       	in	r29, 0x3e	; 62
  if(~PINC&0b00000111){ // обработчик нажатия
     fdc:	83 e3       	ldi	r24, 0x33	; 51
     fde:	90 e0       	ldi	r25, 0x00	; 0
     fe0:	fc 01       	movw	r30, r24
     fe2:	80 81       	ld	r24, Z
     fe4:	88 2f       	mov	r24, r24
     fe6:	90 e0       	ldi	r25, 0x00	; 0
     fe8:	80 95       	com	r24
     fea:	90 95       	com	r25
     fec:	87 70       	andi	r24, 0x07	; 7
     fee:	99 27       	eor	r25, r25
     ff0:	00 97       	sbiw	r24, 0x00	; 0
     ff2:	09 f4       	brne	.+2      	; 0xff6 <KeyScan+0x22>
     ff4:	58 c0       	rjmp	.+176    	; 0x10a6 <KeyScan+0xd2>
    flags.KeyReleased=0;
     ff6:	80 91 90 00 	lds	r24, 0x0090
     ffa:	8b 7f       	andi	r24, 0xFB	; 251
     ffc:	80 93 90 00 	sts	0x0090, r24
        if (++i > 5 ) {      //короткое нажатие 100-250 миллисекунд
    1000:	80 91 8e 00 	lds	r24, 0x008E
    1004:	90 91 8f 00 	lds	r25, 0x008F
    1008:	01 96       	adiw	r24, 0x01	; 1
    100a:	90 93 8f 00 	sts	0x008F, r25
    100e:	80 93 8e 00 	sts	0x008E, r24
    1012:	80 91 8e 00 	lds	r24, 0x008E
    1016:	90 91 8f 00 	lds	r25, 0x008F
    101a:	86 30       	cpi	r24, 0x06	; 6
    101c:	91 05       	cpc	r25, r1
    101e:	08 f4       	brcc	.+2      	; 0x1022 <KeyScan+0x4e>
    1020:	55 c0       	rjmp	.+170    	; 0x10cc <KeyScan+0xf8>
            if (!flags.KeyPressed){flags.KeyPressed = 1;flags.KeyPin=(~PINC&0b00000111);}
    1022:	80 91 90 00 	lds	r24, 0x0090
    1026:	81 fb       	bst	r24, 1
    1028:	99 27       	eor	r25, r25
    102a:	90 f9       	bld	r25, 0
    102c:	81 e0       	ldi	r24, 0x01	; 1
    102e:	89 27       	eor	r24, r25
    1030:	88 23       	and	r24, r24
    1032:	11 f1       	breq	.+68     	; 0x1078 <KeyScan+0xa4>
    1034:	80 91 90 00 	lds	r24, 0x0090
    1038:	82 60       	ori	r24, 0x02	; 2
    103a:	80 93 90 00 	sts	0x0090, r24
    103e:	83 e3       	ldi	r24, 0x33	; 51
    1040:	90 e0       	ldi	r25, 0x00	; 0
    1042:	fc 01       	movw	r30, r24
    1044:	80 81       	ld	r24, Z
    1046:	80 95       	com	r24
    1048:	8f 70       	andi	r24, 0x0F	; 15
    104a:	87 70       	andi	r24, 0x07	; 7
    104c:	98 2f       	mov	r25, r24
    104e:	97 70       	andi	r25, 0x07	; 7
    1050:	92 95       	swap	r25
    1052:	99 0f       	add	r25, r25
    1054:	90 7e       	andi	r25, 0xE0	; 224
    1056:	20 91 90 00 	lds	r18, 0x0090
    105a:	2f 71       	andi	r18, 0x1F	; 31
    105c:	92 2b       	or	r25, r18
    105e:	90 93 90 00 	sts	0x0090, r25
    1062:	86 95       	lsr	r24
    1064:	86 95       	lsr	r24
    1066:	86 95       	lsr	r24
    1068:	81 70       	andi	r24, 0x01	; 1
    106a:	81 70       	andi	r24, 0x01	; 1
    106c:	90 91 91 00 	lds	r25, 0x0091
    1070:	9e 7f       	andi	r25, 0xFE	; 254
    1072:	89 2b       	or	r24, r25
    1074:	80 93 91 00 	sts	0x0091, r24
               if ( i > 100 ){  //длинное нажатие 1-3 секунды
    1078:	80 91 8e 00 	lds	r24, 0x008E
    107c:	90 91 8f 00 	lds	r25, 0x008F
    1080:	85 36       	cpi	r24, 0x65	; 101
    1082:	91 05       	cpc	r25, r1
    1084:	18 f1       	brcs	.+70     	; 0x10cc <KeyScan+0xf8>
                 if (!flags.KeyPushLong){
    1086:	80 91 90 00 	lds	r24, 0x0090
    108a:	83 fb       	bst	r24, 3
    108c:	99 27       	eor	r25, r25
    108e:	90 f9       	bld	r25, 0
    1090:	81 e0       	ldi	r24, 0x01	; 1
    1092:	89 27       	eor	r24, r25
    1094:	88 23       	and	r24, r24
    1096:	d1 f0       	breq	.+52     	; 0x10cc <KeyScan+0xf8>

                    flags.KeyPushLong=1;
    1098:	80 91 90 00 	lds	r24, 0x0090
    109c:	88 60       	ori	r24, 0x08	; 8
    109e:	80 93 90 00 	sts	0x0090, r24
                    KeyState();
    10a2:	25 df       	rcall	.-438    	; 0xeee <KeyState>
    10a4:	13 c0       	rjmp	.+38     	; 0x10cc <KeyScan+0xf8>
                 }
               }
        }
    }
    else {
        i=0;
    10a6:	10 92 8f 00 	sts	0x008F, r1
    10aa:	10 92 8e 00 	sts	0x008E, r1
        if (!flags.KeyReleased) {flags.KeyReleased=1;}
    10ae:	80 91 90 00 	lds	r24, 0x0090
    10b2:	82 fb       	bst	r24, 2
    10b4:	99 27       	eor	r25, r25
    10b6:	90 f9       	bld	r25, 0
    10b8:	81 e0       	ldi	r24, 0x01	; 1
    10ba:	89 27       	eor	r24, r25
    10bc:	88 23       	and	r24, r24
    10be:	29 f0       	breq	.+10     	; 0x10ca <KeyScan+0xf6>
    10c0:	80 91 90 00 	lds	r24, 0x0090
    10c4:	84 60       	ori	r24, 0x04	; 4
    10c6:	80 93 90 00 	sts	0x0090, r24
        KeyState();
    10ca:	11 df       	rcall	.-478    	; 0xeee <KeyState>
    }
        AddTask(KeyScan,25);
    10cc:	69 e1       	ldi	r22, 0x19	; 25
    10ce:	70 e0       	ldi	r23, 0x00	; 0
    10d0:	8a ee       	ldi	r24, 0xEA	; 234
    10d2:	97 e0       	ldi	r25, 0x07	; 7
    10d4:	69 d0       	rcall	.+210    	; 0x11a8 <AddTask>
}
    10d6:	df 91       	pop	r29
    10d8:	cf 91       	pop	r28
    10da:	08 95       	ret

000010dc <main>:
//}
//Костыли :(
//extern void FuncINDTime();
/***Главная функция***/
int main (void)
{
    10dc:	cf 93       	push	r28
    10de:	df 93       	push	r29
    10e0:	cd b7       	in	r28, 0x3d	; 61
    10e2:	de b7       	in	r29, 0x3e	; 62
	InitTimer();
    10e4:	f8 d3       	rcall	.+2032   	; 0x18d6 <InitTimer>
	InitADC();
    10e6:	9e d8       	rcall	.-3780   	; 0x224 <InitADC>
    InitScheduler();
    10e8:	0f d3       	rcall	.+1566   	; 0x1708 <InitScheduler>
    IND_Init();
    10ea:	96 dc       	rcall	.-1748   	; 0xa18 <IND_Init>
    InitControl();
    10ec:	dc de       	rcall	.-584    	; 0xea6 <InitControl>
  // флаги нужны для флагового автомата , скоро они будут не нужны или не все
    flags.KeyPin=0;
    10ee:	80 91 90 00 	lds	r24, 0x0090
    10f2:	8f 71       	andi	r24, 0x1F	; 31
    10f4:	80 93 90 00 	sts	0x0090, r24
    10f8:	80 91 91 00 	lds	r24, 0x0091
    10fc:	8e 7f       	andi	r24, 0xFE	; 254
    10fe:	80 93 91 00 	sts	0x0091, r24
    flags.KeyPushLong=0;
    1102:	80 91 90 00 	lds	r24, 0x0090
    1106:	87 7f       	andi	r24, 0xF7	; 247
    1108:	80 93 90 00 	sts	0x0090, r24
    flags.KeyState=0;
    110c:	80 91 90 00 	lds	r24, 0x0090
    1110:	8f 7e       	andi	r24, 0xEF	; 239
    1112:	80 93 90 00 	sts	0x0090, r24
    flags.KeyPressed = 0;
    1116:	80 91 90 00 	lds	r24, 0x0090
    111a:	8d 7f       	andi	r24, 0xFD	; 253
    111c:	80 93 90 00 	sts	0x0090, r24
    flags.KeyReleased = 1;
    1120:	80 91 90 00 	lds	r24, 0x0090
    1124:	84 60       	ori	r24, 0x04	; 4
    1126:	80 93 90 00 	sts	0x0090, r24
    flags.State_Automate=0;
    112a:	80 91 90 00 	lds	r24, 0x0090
    112e:	8e 7f       	andi	r24, 0xFE	; 254
    1130:	80 93 90 00 	sts	0x0090, r24
    flags.SupplyAuto=0;
    1134:	80 91 91 00 	lds	r24, 0x0091
    1138:	8f 7e       	andi	r24, 0xEF	; 239
    113a:	80 93 91 00 	sts	0x0091, r24
    flags.SupplyManual=0;
    113e:	80 91 91 00 	lds	r24, 0x0091
    1142:	87 7f       	andi	r24, 0xF7	; 247
    1144:	80 93 91 00 	sts	0x0091, r24
    flags.Furnace=0;        //(C,5)
    1148:	80 91 91 00 	lds	r24, 0x0091
    114c:	8b 7f       	andi	r24, 0xFB	; 251
    114e:	80 93 91 00 	sts	0x0091, r24
    flags.NextState=0;
    1152:	80 91 91 00 	lds	r24, 0x0091
    1156:	8f 77       	andi	r24, 0x7F	; 127
    1158:	80 93 91 00 	sts	0x0091, r24
    flags.RunFlag=1;
    115c:	80 91 92 00 	lds	r24, 0x0092
    1160:	81 60       	ori	r24, 0x01	; 1
    1162:	80 93 92 00 	sts	0x0092, r24
    flags.TimerFlag=0;
    1166:	80 91 91 00 	lds	r24, 0x0091
    116a:	8f 7d       	andi	r24, 0xDF	; 223
    116c:	80 93 91 00 	sts	0x0091, r24
    // задачи диспетчера
    AddTask(IND_Update,1); // тут допилить , увеличить частоту таймера диспетчера , чтобы цифры не дрожали
    1170:	61 e0       	ldi	r22, 0x01	; 1
    1172:	70 e0       	ldi	r23, 0x00	; 0
    1174:	81 ec       	ldi	r24, 0xC1	; 193
    1176:	96 e0       	ldi	r25, 0x06	; 6
    1178:	17 d0       	rcall	.+46     	; 0x11a8 <AddTask>
    AddTask(KeyScan,25);
    117a:	69 e1       	ldi	r22, 0x19	; 25
    117c:	70 e0       	ldi	r23, 0x00	; 0
    117e:	8a ee       	ldi	r24, 0xEA	; 234
    1180:	97 e0       	ldi	r25, 0x07	; 7
    1182:	12 d0       	rcall	.+36     	; 0x11a8 <AddTask>
    AddTask(FuncINDTime,250);
    1184:	6a ef       	ldi	r22, 0xFA	; 250
    1186:	70 e0       	ldi	r23, 0x00	; 0
    1188:	87 e6       	ldi	r24, 0x67	; 103
    118a:	92 e0       	ldi	r25, 0x02	; 2
    118c:	0d d0       	rcall	.+26     	; 0x11a8 <AddTask>
    AddTask(StateAutomate,50);
    118e:	62 e3       	ldi	r22, 0x32	; 50
    1190:	70 e0       	ldi	r23, 0x00	; 0
    1192:	8f e4       	ldi	r24, 0x4F	; 79
    1194:	91 e0       	ldi	r25, 0x01	; 1
    1196:	08 d0       	rcall	.+16     	; 0x11a8 <AddTask>
    AddTask(doubleCountdown,100);
    1198:	64 e6       	ldi	r22, 0x64	; 100
    119a:	70 e0       	ldi	r23, 0x00	; 0
    119c:	87 ed       	ldi	r24, 0xD7	; 215
    119e:	9b e0       	ldi	r25, 0x0B	; 11
    11a0:	03 d0       	rcall	.+6      	; 0x11a8 <AddTask>
    sei();
    11a2:	78 94       	sei
        if (!(TIFR&(1<<TOV1))){
            AddTask(doubleCountdown,5);
           // (TIFR |= (1<<TOV1));
         //   (TIFR&= ~(1<<TOV1));
        }   //*/
        DispatchTask();
    11a4:	8b d1       	rcall	.+790    	; 0x14bc <DispatchTask>

    }return 0;
    11a6:	fe cf       	rjmp	.-4      	; 0x11a4 <main+0xc8>

000011a8 <AddTask>:
#include "dispatch.h"
//delay_time=50;
#ifdef LSHED
void AddTask (void (*taskfunc)(void), uint16_t taskdelay){
    11a8:	cf 93       	push	r28
    11aa:	df 93       	push	r29
    11ac:	cd b7       	in	r28, 0x3d	; 61
    11ae:	de b7       	in	r29, 0x3e	; 62
    11b0:	2a 97       	sbiw	r28, 0x0a	; 10
    11b2:	0f b6       	in	r0, 0x3f	; 63
    11b4:	f8 94       	cli
    11b6:	de bf       	out	0x3e, r29	; 62
    11b8:	0f be       	out	0x3f, r0	; 63
    11ba:	cd bf       	out	0x3d, r28	; 61
    11bc:	98 87       	std	Y+8, r25	; 0x08
    11be:	8f 83       	std	Y+7, r24	; 0x07
    11c0:	7a 87       	std	Y+10, r23	; 0x0a
    11c2:	69 87       	std	Y+9, r22	; 0x09
   uint8_t n=0;
    11c4:	19 82       	std	Y+1, r1	; 0x01
   uint8_t position=0;
    11c6:	1a 82       	std	Y+2, r1	; 0x02
   // крутить пока : не попадется функция или пустая функция или пустой отсчет  и отсчет больше следующих и не больше количества задач
   while (((TaskArray[n].pfunc!=(*taskfunc))&&((TaskArray[n].pfunc!=0)||(TaskArray[n].countdown!=0)))&&(TaskArray[n].countdown<=((taskdelay==0)?(++taskdelay):(taskdelay))&&(n < MAXnTASKS)))n++;
    11c8:	03 c0       	rjmp	.+6      	; 0x11d0 <AddTask+0x28>
    11ca:	89 81       	ldd	r24, Y+1	; 0x01
    11cc:	8f 5f       	subi	r24, 0xFF	; 255
    11ce:	89 83       	std	Y+1, r24	; 0x01
    11d0:	89 81       	ldd	r24, Y+1	; 0x01
    11d2:	88 2f       	mov	r24, r24
    11d4:	90 e0       	ldi	r25, 0x00	; 0
    11d6:	88 0f       	add	r24, r24
    11d8:	99 1f       	adc	r25, r25
    11da:	88 0f       	add	r24, r24
    11dc:	99 1f       	adc	r25, r25
    11de:	83 56       	subi	r24, 0x63	; 99
    11e0:	9f 4f       	sbci	r25, 0xFF	; 255
    11e2:	fc 01       	movw	r30, r24
    11e4:	20 81       	ld	r18, Z
    11e6:	31 81       	ldd	r19, Z+1	; 0x01
    11e8:	8f 81       	ldd	r24, Y+7	; 0x07
    11ea:	98 85       	ldd	r25, Y+8	; 0x08
    11ec:	28 17       	cp	r18, r24
    11ee:	39 07       	cpc	r19, r25
    11f0:	e9 f1       	breq	.+122    	; 0x126c <AddTask+0xc4>
    11f2:	89 81       	ldd	r24, Y+1	; 0x01
    11f4:	88 2f       	mov	r24, r24
    11f6:	90 e0       	ldi	r25, 0x00	; 0
    11f8:	88 0f       	add	r24, r24
    11fa:	99 1f       	adc	r25, r25
    11fc:	88 0f       	add	r24, r24
    11fe:	99 1f       	adc	r25, r25
    1200:	83 56       	subi	r24, 0x63	; 99
    1202:	9f 4f       	sbci	r25, 0xFF	; 255
    1204:	fc 01       	movw	r30, r24
    1206:	80 81       	ld	r24, Z
    1208:	91 81       	ldd	r25, Z+1	; 0x01
    120a:	00 97       	sbiw	r24, 0x00	; 0
    120c:	71 f4       	brne	.+28     	; 0x122a <AddTask+0x82>
    120e:	89 81       	ldd	r24, Y+1	; 0x01
    1210:	88 2f       	mov	r24, r24
    1212:	90 e0       	ldi	r25, 0x00	; 0
    1214:	88 0f       	add	r24, r24
    1216:	99 1f       	adc	r25, r25
    1218:	88 0f       	add	r24, r24
    121a:	99 1f       	adc	r25, r25
    121c:	81 56       	subi	r24, 0x61	; 97
    121e:	9f 4f       	sbci	r25, 0xFF	; 255
    1220:	fc 01       	movw	r30, r24
    1222:	80 81       	ld	r24, Z
    1224:	91 81       	ldd	r25, Z+1	; 0x01
    1226:	00 97       	sbiw	r24, 0x00	; 0
    1228:	09 f1       	breq	.+66     	; 0x126c <AddTask+0xc4>
    122a:	89 81       	ldd	r24, Y+1	; 0x01
    122c:	88 2f       	mov	r24, r24
    122e:	90 e0       	ldi	r25, 0x00	; 0
    1230:	88 0f       	add	r24, r24
    1232:	99 1f       	adc	r25, r25
    1234:	88 0f       	add	r24, r24
    1236:	99 1f       	adc	r25, r25
    1238:	81 56       	subi	r24, 0x61	; 97
    123a:	9f 4f       	sbci	r25, 0xFF	; 255
    123c:	fc 01       	movw	r30, r24
    123e:	20 81       	ld	r18, Z
    1240:	31 81       	ldd	r19, Z+1	; 0x01
    1242:	89 85       	ldd	r24, Y+9	; 0x09
    1244:	9a 85       	ldd	r25, Y+10	; 0x0a
    1246:	00 97       	sbiw	r24, 0x00	; 0
    1248:	41 f4       	brne	.+16     	; 0x125a <AddTask+0xb2>
    124a:	89 85       	ldd	r24, Y+9	; 0x09
    124c:	9a 85       	ldd	r25, Y+10	; 0x0a
    124e:	01 96       	adiw	r24, 0x01	; 1
    1250:	9a 87       	std	Y+10, r25	; 0x0a
    1252:	89 87       	std	Y+9, r24	; 0x09
    1254:	89 85       	ldd	r24, Y+9	; 0x09
    1256:	9a 85       	ldd	r25, Y+10	; 0x0a
    1258:	02 c0       	rjmp	.+4      	; 0x125e <AddTask+0xb6>
    125a:	89 85       	ldd	r24, Y+9	; 0x09
    125c:	9a 85       	ldd	r25, Y+10	; 0x0a
    125e:	82 17       	cp	r24, r18
    1260:	93 07       	cpc	r25, r19
    1262:	20 f0       	brcs	.+8      	; 0x126c <AddTask+0xc4>
    1264:	89 81       	ldd	r24, Y+1	; 0x01
    1266:	88 30       	cpi	r24, 0x08	; 8
    1268:	08 f4       	brcc	.+2      	; 0x126c <AddTask+0xc4>
    126a:	af cf       	rjmp	.-162    	; 0x11ca <AddTask+0x22>
    position=n;
    126c:	89 81       	ldd	r24, Y+1	; 0x01
    126e:	8a 83       	std	Y+2, r24	; 0x02
        if ((TaskArray[position].pfunc==(*taskfunc))){// если есть уже такая функция в списке , то добавляем ей время
    1270:	8a 81       	ldd	r24, Y+2	; 0x02
    1272:	88 2f       	mov	r24, r24
    1274:	90 e0       	ldi	r25, 0x00	; 0
    1276:	88 0f       	add	r24, r24
    1278:	99 1f       	adc	r25, r25
    127a:	88 0f       	add	r24, r24
    127c:	99 1f       	adc	r25, r25
    127e:	83 56       	subi	r24, 0x63	; 99
    1280:	9f 4f       	sbci	r25, 0xFF	; 255
    1282:	fc 01       	movw	r30, r24
    1284:	20 81       	ld	r18, Z
    1286:	31 81       	ldd	r19, Z+1	; 0x01
    1288:	8f 81       	ldd	r24, Y+7	; 0x07
    128a:	98 85       	ldd	r25, Y+8	; 0x08
    128c:	28 17       	cp	r18, r24
    128e:	39 07       	cpc	r19, r25
    1290:	09 f0       	breq	.+2      	; 0x1294 <AddTask+0xec>
    1292:	97 c0       	rjmp	.+302    	; 0x13c2 <AddTask+0x21a>
             TaskArray[position].countdown += taskdelay;  // прибавили время , нужно еще раз сортировать вниз по очереди
    1294:	8a 81       	ldd	r24, Y+2	; 0x02
    1296:	88 2f       	mov	r24, r24
    1298:	90 e0       	ldi	r25, 0x00	; 0
    129a:	2a 81       	ldd	r18, Y+2	; 0x02
    129c:	22 2f       	mov	r18, r18
    129e:	30 e0       	ldi	r19, 0x00	; 0
    12a0:	22 0f       	add	r18, r18
    12a2:	33 1f       	adc	r19, r19
    12a4:	22 0f       	add	r18, r18
    12a6:	33 1f       	adc	r19, r19
    12a8:	21 56       	subi	r18, 0x61	; 97
    12aa:	3f 4f       	sbci	r19, 0xFF	; 255
    12ac:	f9 01       	movw	r30, r18
    12ae:	40 81       	ld	r20, Z
    12b0:	51 81       	ldd	r21, Z+1	; 0x01
    12b2:	29 85       	ldd	r18, Y+9	; 0x09
    12b4:	3a 85       	ldd	r19, Y+10	; 0x0a
    12b6:	24 0f       	add	r18, r20
    12b8:	35 1f       	adc	r19, r21
    12ba:	88 0f       	add	r24, r24
    12bc:	99 1f       	adc	r25, r25
    12be:	88 0f       	add	r24, r24
    12c0:	99 1f       	adc	r25, r25
    12c2:	81 56       	subi	r24, 0x61	; 97
    12c4:	9f 4f       	sbci	r25, 0xFF	; 255
    12c6:	fc 01       	movw	r30, r24
    12c8:	31 83       	std	Z+1, r19	; 0x01
    12ca:	20 83       	st	Z, r18
                                                        // как бы это сделать без goto и лишних функций
                                                        // еще один проход ничего не изменит т.к он найдет эту же функцию
                                                        // как вариант разбить на функции , но как с передачей имени функции ???
                                                        // перемотаем до конца или пока счетчики меньше текущего
        task tmp2;
        while ((TaskArray[n+1].pfunc!=0)&&(TaskArray[n+1].countdown<=TaskArray[n].countdown)){
    12cc:	48 c0       	rjmp	.+144    	; 0x135e <AddTask+0x1b6>
                tmp2=TaskArray[n+1];
    12ce:	89 81       	ldd	r24, Y+1	; 0x01
    12d0:	88 2f       	mov	r24, r24
    12d2:	90 e0       	ldi	r25, 0x00	; 0
    12d4:	01 96       	adiw	r24, 0x01	; 1
    12d6:	88 0f       	add	r24, r24
    12d8:	99 1f       	adc	r25, r25
    12da:	88 0f       	add	r24, r24
    12dc:	99 1f       	adc	r25, r25
    12de:	83 56       	subi	r24, 0x63	; 99
    12e0:	9f 4f       	sbci	r25, 0xFF	; 255
    12e2:	fc 01       	movw	r30, r24
    12e4:	80 81       	ld	r24, Z
    12e6:	91 81       	ldd	r25, Z+1	; 0x01
    12e8:	a2 81       	ldd	r26, Z+2	; 0x02
    12ea:	b3 81       	ldd	r27, Z+3	; 0x03
    12ec:	8b 83       	std	Y+3, r24	; 0x03
    12ee:	9c 83       	std	Y+4, r25	; 0x04
    12f0:	ad 83       	std	Y+5, r26	; 0x05
    12f2:	be 83       	std	Y+6, r27	; 0x06
                TaskArray[n+1]=TaskArray[n];
    12f4:	89 81       	ldd	r24, Y+1	; 0x01
    12f6:	88 2f       	mov	r24, r24
    12f8:	90 e0       	ldi	r25, 0x00	; 0
    12fa:	9c 01       	movw	r18, r24
    12fc:	2f 5f       	subi	r18, 0xFF	; 255
    12fe:	3f 4f       	sbci	r19, 0xFF	; 255
    1300:	89 81       	ldd	r24, Y+1	; 0x01
    1302:	88 2f       	mov	r24, r24
    1304:	90 e0       	ldi	r25, 0x00	; 0
    1306:	22 0f       	add	r18, r18
    1308:	33 1f       	adc	r19, r19
    130a:	22 0f       	add	r18, r18
    130c:	33 1f       	adc	r19, r19
    130e:	23 56       	subi	r18, 0x63	; 99
    1310:	3f 4f       	sbci	r19, 0xFF	; 255
    1312:	88 0f       	add	r24, r24
    1314:	99 1f       	adc	r25, r25
    1316:	88 0f       	add	r24, r24
    1318:	99 1f       	adc	r25, r25
    131a:	83 56       	subi	r24, 0x63	; 99
    131c:	9f 4f       	sbci	r25, 0xFF	; 255
    131e:	fc 01       	movw	r30, r24
    1320:	80 81       	ld	r24, Z
    1322:	91 81       	ldd	r25, Z+1	; 0x01
    1324:	a2 81       	ldd	r26, Z+2	; 0x02
    1326:	b3 81       	ldd	r27, Z+3	; 0x03
    1328:	f9 01       	movw	r30, r18
    132a:	80 83       	st	Z, r24
    132c:	91 83       	std	Z+1, r25	; 0x01
    132e:	a2 83       	std	Z+2, r26	; 0x02
    1330:	b3 83       	std	Z+3, r27	; 0x03
                TaskArray[n]=tmp2;
    1332:	89 81       	ldd	r24, Y+1	; 0x01
    1334:	88 2f       	mov	r24, r24
    1336:	90 e0       	ldi	r25, 0x00	; 0
    1338:	88 0f       	add	r24, r24
    133a:	99 1f       	adc	r25, r25
    133c:	88 0f       	add	r24, r24
    133e:	99 1f       	adc	r25, r25
    1340:	9c 01       	movw	r18, r24
    1342:	23 56       	subi	r18, 0x63	; 99
    1344:	3f 4f       	sbci	r19, 0xFF	; 255
    1346:	8b 81       	ldd	r24, Y+3	; 0x03
    1348:	9c 81       	ldd	r25, Y+4	; 0x04
    134a:	ad 81       	ldd	r26, Y+5	; 0x05
    134c:	be 81       	ldd	r27, Y+6	; 0x06
    134e:	f9 01       	movw	r30, r18
    1350:	80 83       	st	Z, r24
    1352:	91 83       	std	Z+1, r25	; 0x01
    1354:	a2 83       	std	Z+2, r26	; 0x02
    1356:	b3 83       	std	Z+3, r27	; 0x03
                n++;
    1358:	89 81       	ldd	r24, Y+1	; 0x01
    135a:	8f 5f       	subi	r24, 0xFF	; 255
    135c:	89 83       	std	Y+1, r24	; 0x01
                                                        // как бы это сделать без goto и лишних функций
                                                        // еще один проход ничего не изменит т.к он найдет эту же функцию
                                                        // как вариант разбить на функции , но как с передачей имени функции ???
                                                        // перемотаем до конца или пока счетчики меньше текущего
        task tmp2;
        while ((TaskArray[n+1].pfunc!=0)&&(TaskArray[n+1].countdown<=TaskArray[n].countdown)){
    135e:	89 81       	ldd	r24, Y+1	; 0x01
    1360:	88 2f       	mov	r24, r24
    1362:	90 e0       	ldi	r25, 0x00	; 0
    1364:	01 96       	adiw	r24, 0x01	; 1
    1366:	88 0f       	add	r24, r24
    1368:	99 1f       	adc	r25, r25
    136a:	88 0f       	add	r24, r24
    136c:	99 1f       	adc	r25, r25
    136e:	83 56       	subi	r24, 0x63	; 99
    1370:	9f 4f       	sbci	r25, 0xFF	; 255
    1372:	fc 01       	movw	r30, r24
    1374:	80 81       	ld	r24, Z
    1376:	91 81       	ldd	r25, Z+1	; 0x01
    1378:	00 97       	sbiw	r24, 0x00	; 0
    137a:	09 f4       	brne	.+2      	; 0x137e <AddTask+0x1d6>
    137c:	83 c0       	rjmp	.+262    	; 0x1484 <AddTask+0x2dc>
    137e:	89 81       	ldd	r24, Y+1	; 0x01
    1380:	88 2f       	mov	r24, r24
    1382:	90 e0       	ldi	r25, 0x00	; 0
    1384:	01 96       	adiw	r24, 0x01	; 1
    1386:	88 0f       	add	r24, r24
    1388:	99 1f       	adc	r25, r25
    138a:	88 0f       	add	r24, r24
    138c:	99 1f       	adc	r25, r25
    138e:	81 56       	subi	r24, 0x61	; 97
    1390:	9f 4f       	sbci	r25, 0xFF	; 255
    1392:	fc 01       	movw	r30, r24
    1394:	20 81       	ld	r18, Z
    1396:	31 81       	ldd	r19, Z+1	; 0x01
    1398:	89 81       	ldd	r24, Y+1	; 0x01
    139a:	88 2f       	mov	r24, r24
    139c:	90 e0       	ldi	r25, 0x00	; 0
    139e:	88 0f       	add	r24, r24
    13a0:	99 1f       	adc	r25, r25
    13a2:	88 0f       	add	r24, r24
    13a4:	99 1f       	adc	r25, r25
    13a6:	81 56       	subi	r24, 0x61	; 97
    13a8:	9f 4f       	sbci	r25, 0xFF	; 255
    13aa:	fc 01       	movw	r30, r24
    13ac:	80 81       	ld	r24, Z
    13ae:	91 81       	ldd	r25, Z+1	; 0x01
    13b0:	82 17       	cp	r24, r18
    13b2:	93 07       	cpc	r25, r19
    13b4:	08 f0       	brcs	.+2      	; 0x13b8 <AddTask+0x210>
    13b6:	8b cf       	rjmp	.-234    	; 0x12ce <AddTask+0x126>
    13b8:	65 c0       	rjmp	.+202    	; 0x1484 <AddTask+0x2dc>
        }
        //while (((TaskArray[n].pfunc!=0)||(TaskArray[n].countdown!=0))&&(TaskArray[n].countdown<=(TaskArray[position].countdown))&&(n < MAXnTASKS)))n++;
        // а теперь нужно сдвинуть очередь :) теперь наверное нужна новая позиция , здесь скорее пойдет сортировка перестановкой
        // чтож , еще одна временная структура
        }else {
        while ((TaskArray[n].pfunc != 0) && (TaskArray[n].countdown!=0) && (n < MAXnTASKS))n++;   // этот цикл мотает до конца очереди
    13ba:	89 81       	ldd	r24, Y+1	; 0x01
    13bc:	8f 5f       	subi	r24, 0xFF	; 255
    13be:	89 83       	std	Y+1, r24	; 0x01
    13c0:	01 c0       	rjmp	.+2      	; 0x13c4 <AddTask+0x21c>
    13c2:	00 00       	nop
    13c4:	89 81       	ldd	r24, Y+1	; 0x01
    13c6:	88 2f       	mov	r24, r24
    13c8:	90 e0       	ldi	r25, 0x00	; 0
    13ca:	88 0f       	add	r24, r24
    13cc:	99 1f       	adc	r25, r25
    13ce:	88 0f       	add	r24, r24
    13d0:	99 1f       	adc	r25, r25
    13d2:	83 56       	subi	r24, 0x63	; 99
    13d4:	9f 4f       	sbci	r25, 0xFF	; 255
    13d6:	fc 01       	movw	r30, r24
    13d8:	80 81       	ld	r24, Z
    13da:	91 81       	ldd	r25, Z+1	; 0x01
    13dc:	00 97       	sbiw	r24, 0x00	; 0
    13de:	91 f1       	breq	.+100    	; 0x1444 <AddTask+0x29c>
    13e0:	89 81       	ldd	r24, Y+1	; 0x01
    13e2:	88 2f       	mov	r24, r24
    13e4:	90 e0       	ldi	r25, 0x00	; 0
    13e6:	88 0f       	add	r24, r24
    13e8:	99 1f       	adc	r25, r25
    13ea:	88 0f       	add	r24, r24
    13ec:	99 1f       	adc	r25, r25
    13ee:	81 56       	subi	r24, 0x61	; 97
    13f0:	9f 4f       	sbci	r25, 0xFF	; 255
    13f2:	fc 01       	movw	r30, r24
    13f4:	80 81       	ld	r24, Z
    13f6:	91 81       	ldd	r25, Z+1	; 0x01
    13f8:	00 97       	sbiw	r24, 0x00	; 0
    13fa:	21 f1       	breq	.+72     	; 0x1444 <AddTask+0x29c>
    13fc:	89 81       	ldd	r24, Y+1	; 0x01
    13fe:	88 30       	cpi	r24, 0x08	; 8
    1400:	e0 f2       	brcs	.-72     	; 0x13ba <AddTask+0x212>
        for (/*.*/;n>position;n--){TaskArray[n]=TaskArray[n-1];} // этот сдвигает с конца до позиции
    1402:	20 c0       	rjmp	.+64     	; 0x1444 <AddTask+0x29c>
    1404:	89 81       	ldd	r24, Y+1	; 0x01
    1406:	28 2f       	mov	r18, r24
    1408:	30 e0       	ldi	r19, 0x00	; 0
    140a:	89 81       	ldd	r24, Y+1	; 0x01
    140c:	88 2f       	mov	r24, r24
    140e:	90 e0       	ldi	r25, 0x00	; 0
    1410:	01 97       	sbiw	r24, 0x01	; 1
    1412:	22 0f       	add	r18, r18
    1414:	33 1f       	adc	r19, r19
    1416:	22 0f       	add	r18, r18
    1418:	33 1f       	adc	r19, r19
    141a:	23 56       	subi	r18, 0x63	; 99
    141c:	3f 4f       	sbci	r19, 0xFF	; 255
    141e:	88 0f       	add	r24, r24
    1420:	99 1f       	adc	r25, r25
    1422:	88 0f       	add	r24, r24
    1424:	99 1f       	adc	r25, r25
    1426:	83 56       	subi	r24, 0x63	; 99
    1428:	9f 4f       	sbci	r25, 0xFF	; 255
    142a:	fc 01       	movw	r30, r24
    142c:	80 81       	ld	r24, Z
    142e:	91 81       	ldd	r25, Z+1	; 0x01
    1430:	a2 81       	ldd	r26, Z+2	; 0x02
    1432:	b3 81       	ldd	r27, Z+3	; 0x03
    1434:	f9 01       	movw	r30, r18
    1436:	80 83       	st	Z, r24
    1438:	91 83       	std	Z+1, r25	; 0x01
    143a:	a2 83       	std	Z+2, r26	; 0x02
    143c:	b3 83       	std	Z+3, r27	; 0x03
    143e:	89 81       	ldd	r24, Y+1	; 0x01
    1440:	81 50       	subi	r24, 0x01	; 1
    1442:	89 83       	std	Y+1, r24	; 0x01
    1444:	99 81       	ldd	r25, Y+1	; 0x01
    1446:	8a 81       	ldd	r24, Y+2	; 0x02
    1448:	89 17       	cp	r24, r25
    144a:	e0 f2       	brcs	.-72     	; 0x1404 <AddTask+0x25c>
        TaskArray[position].pfunc = *taskfunc;                      // если присвоить раньше  , то значение потеряется??? да!
    144c:	8a 81       	ldd	r24, Y+2	; 0x02
    144e:	88 2f       	mov	r24, r24
    1450:	90 e0       	ldi	r25, 0x00	; 0
    1452:	88 0f       	add	r24, r24
    1454:	99 1f       	adc	r25, r25
    1456:	88 0f       	add	r24, r24
    1458:	99 1f       	adc	r25, r25
    145a:	83 56       	subi	r24, 0x63	; 99
    145c:	9f 4f       	sbci	r25, 0xFF	; 255
    145e:	2f 81       	ldd	r18, Y+7	; 0x07
    1460:	38 85       	ldd	r19, Y+8	; 0x08
    1462:	fc 01       	movw	r30, r24
    1464:	31 83       	std	Z+1, r19	; 0x01
    1466:	20 83       	st	Z, r18
        TaskArray[position].countdown = taskdelay;
    1468:	8a 81       	ldd	r24, Y+2	; 0x02
    146a:	88 2f       	mov	r24, r24
    146c:	90 e0       	ldi	r25, 0x00	; 0
    146e:	88 0f       	add	r24, r24
    1470:	99 1f       	adc	r25, r25
    1472:	88 0f       	add	r24, r24
    1474:	99 1f       	adc	r25, r25
    1476:	81 56       	subi	r24, 0x61	; 97
    1478:	9f 4f       	sbci	r25, 0xFF	; 255
    147a:	29 85       	ldd	r18, Y+9	; 0x09
    147c:	3a 85       	ldd	r19, Y+10	; 0x0a
    147e:	fc 01       	movw	r30, r24
    1480:	31 83       	std	Z+1, r19	; 0x01
    1482:	20 83       	st	Z, r18
        }
       if (n==0){ delay_time=TaskArray[0].countdown;dt=delay_time;} //если в очереди пусто вроде
    1484:	89 81       	ldd	r24, Y+1	; 0x01
    1486:	88 23       	and	r24, r24
    1488:	81 f4       	brne	.+32     	; 0x14aa <AddTask+0x302>
    148a:	80 91 9f 00 	lds	r24, 0x009F
    148e:	90 91 a0 00 	lds	r25, 0x00A0
    1492:	90 93 9c 00 	sts	0x009C, r25
    1496:	80 93 9b 00 	sts	0x009B, r24
    149a:	80 91 9b 00 	lds	r24, 0x009B
    149e:	90 91 9c 00 	lds	r25, 0x009C
    14a2:	90 93 be 00 	sts	0x00BE, r25
    14a6:	80 93 bd 00 	sts	0x00BD, r24
// при добавлении нужно обновлять счетчик, тк там старое значение
}
    14aa:	2a 96       	adiw	r28, 0x0a	; 10
    14ac:	0f b6       	in	r0, 0x3f	; 63
    14ae:	f8 94       	cli
    14b0:	de bf       	out	0x3e, r29	; 62
    14b2:	0f be       	out	0x3f, r0	; 63
    14b4:	cd bf       	out	0x3d, r28	; 61
    14b6:	df 91       	pop	r29
    14b8:	cf 91       	pop	r28
    14ba:	08 95       	ret

000014bc <DispatchTask>:

void DispatchTask (void){
    14bc:	cf 93       	push	r28
    14be:	df 93       	push	r29
    14c0:	00 d0       	rcall	.+0      	; 0x14c2 <DispatchTask+0x6>
    14c2:	00 d0       	rcall	.+0      	; 0x14c4 <DispatchTask+0x8>
    14c4:	1f 92       	push	r1
    14c6:	cd b7       	in	r28, 0x3d	; 61
    14c8:	de b7       	in	r29, 0x3e	; 62
    uint8_t n=0;
    14ca:	19 82       	std	Y+1, r1	; 0x01
    if (flags.RunFlag==1&&TaskArray[0].pfunc != 0){
    14cc:	80 91 92 00 	lds	r24, 0x0092
    14d0:	81 70       	andi	r24, 0x01	; 1
    14d2:	88 23       	and	r24, r24
    14d4:	09 f4       	brne	.+2      	; 0x14d8 <DispatchTask+0x1c>
    14d6:	ab c0       	rjmp	.+342    	; 0x162e <DispatchTask+0x172>
    14d8:	80 91 9d 00 	lds	r24, 0x009D
    14dc:	90 91 9e 00 	lds	r25, 0x009E
    14e0:	00 97       	sbiw	r24, 0x00	; 0
    14e2:	09 f4       	brne	.+2      	; 0x14e6 <DispatchTask+0x2a>
    14e4:	a4 c0       	rjmp	.+328    	; 0x162e <DispatchTask+0x172>
        task tmp;
        tmp=TaskArray[0];
    14e6:	80 91 9d 00 	lds	r24, 0x009D
    14ea:	90 91 9e 00 	lds	r25, 0x009E
    14ee:	a0 91 9f 00 	lds	r26, 0x009F
    14f2:	b0 91 a0 00 	lds	r27, 0x00A0
    14f6:	8a 83       	std	Y+2, r24	; 0x02
    14f8:	9b 83       	std	Y+3, r25	; 0x03
    14fa:	ac 83       	std	Y+4, r26	; 0x04
    14fc:	bd 83       	std	Y+5, r27	; 0x05
        //сдвигаем очередь и затираем первое в  очереди , т.к. оно у нас уже на запуске
    while (((TaskArray[n].pfunc != 0) || (TaskArray[n].countdown!=0)) && (n < MAXnTASKS)){
    14fe:	54 c0       	rjmp	.+168    	; 0x15a8 <DispatchTask+0xec>
        n++;
    1500:	89 81       	ldd	r24, Y+1	; 0x01
    1502:	8f 5f       	subi	r24, 0xFF	; 255
    1504:	89 83       	std	Y+1, r24	; 0x01
        TaskArray[n-1]=TaskArray[n];        //сдвигаем очередь вперед
    1506:	89 81       	ldd	r24, Y+1	; 0x01
    1508:	88 2f       	mov	r24, r24
    150a:	90 e0       	ldi	r25, 0x00	; 0
    150c:	9c 01       	movw	r18, r24
    150e:	21 50       	subi	r18, 0x01	; 1
    1510:	31 09       	sbc	r19, r1
    1512:	89 81       	ldd	r24, Y+1	; 0x01
    1514:	88 2f       	mov	r24, r24
    1516:	90 e0       	ldi	r25, 0x00	; 0
    1518:	22 0f       	add	r18, r18
    151a:	33 1f       	adc	r19, r19
    151c:	22 0f       	add	r18, r18
    151e:	33 1f       	adc	r19, r19
    1520:	23 56       	subi	r18, 0x63	; 99
    1522:	3f 4f       	sbci	r19, 0xFF	; 255
    1524:	88 0f       	add	r24, r24
    1526:	99 1f       	adc	r25, r25
    1528:	88 0f       	add	r24, r24
    152a:	99 1f       	adc	r25, r25
    152c:	83 56       	subi	r24, 0x63	; 99
    152e:	9f 4f       	sbci	r25, 0xFF	; 255
    1530:	fc 01       	movw	r30, r24
    1532:	80 81       	ld	r24, Z
    1534:	91 81       	ldd	r25, Z+1	; 0x01
    1536:	a2 81       	ldd	r26, Z+2	; 0x02
    1538:	b3 81       	ldd	r27, Z+3	; 0x03
    153a:	f9 01       	movw	r30, r18
    153c:	80 83       	st	Z, r24
    153e:	91 83       	std	Z+1, r25	; 0x01
    1540:	a2 83       	std	Z+2, r26	; 0x02
    1542:	b3 83       	std	Z+3, r27	; 0x03
        if (TaskArray[n-1].countdown) TaskArray[n-1].countdown-=dt;     //вычитаем прошедшее время из каждой задачи
    1544:	89 81       	ldd	r24, Y+1	; 0x01
    1546:	88 2f       	mov	r24, r24
    1548:	90 e0       	ldi	r25, 0x00	; 0
    154a:	01 97       	sbiw	r24, 0x01	; 1
    154c:	88 0f       	add	r24, r24
    154e:	99 1f       	adc	r25, r25
    1550:	88 0f       	add	r24, r24
    1552:	99 1f       	adc	r25, r25
    1554:	81 56       	subi	r24, 0x61	; 97
    1556:	9f 4f       	sbci	r25, 0xFF	; 255
    1558:	fc 01       	movw	r30, r24
    155a:	80 81       	ld	r24, Z
    155c:	91 81       	ldd	r25, Z+1	; 0x01
    155e:	00 97       	sbiw	r24, 0x00	; 0
    1560:	19 f1       	breq	.+70     	; 0x15a8 <DispatchTask+0xec>
    1562:	89 81       	ldd	r24, Y+1	; 0x01
    1564:	88 2f       	mov	r24, r24
    1566:	90 e0       	ldi	r25, 0x00	; 0
    1568:	01 97       	sbiw	r24, 0x01	; 1
    156a:	29 81       	ldd	r18, Y+1	; 0x01
    156c:	22 2f       	mov	r18, r18
    156e:	30 e0       	ldi	r19, 0x00	; 0
    1570:	21 50       	subi	r18, 0x01	; 1
    1572:	31 09       	sbc	r19, r1
    1574:	22 0f       	add	r18, r18
    1576:	33 1f       	adc	r19, r19
    1578:	22 0f       	add	r18, r18
    157a:	33 1f       	adc	r19, r19
    157c:	21 56       	subi	r18, 0x61	; 97
    157e:	3f 4f       	sbci	r19, 0xFF	; 255
    1580:	f9 01       	movw	r30, r18
    1582:	40 81       	ld	r20, Z
    1584:	51 81       	ldd	r21, Z+1	; 0x01
    1586:	20 91 bd 00 	lds	r18, 0x00BD
    158a:	30 91 be 00 	lds	r19, 0x00BE
    158e:	ba 01       	movw	r22, r20
    1590:	62 1b       	sub	r22, r18
    1592:	73 0b       	sbc	r23, r19
    1594:	9b 01       	movw	r18, r22
    1596:	88 0f       	add	r24, r24
    1598:	99 1f       	adc	r25, r25
    159a:	88 0f       	add	r24, r24
    159c:	99 1f       	adc	r25, r25
    159e:	81 56       	subi	r24, 0x61	; 97
    15a0:	9f 4f       	sbci	r25, 0xFF	; 255
    15a2:	fc 01       	movw	r30, r24
    15a4:	31 83       	std	Z+1, r19	; 0x01
    15a6:	20 83       	st	Z, r18
    uint8_t n=0;
    if (flags.RunFlag==1&&TaskArray[0].pfunc != 0){
        task tmp;
        tmp=TaskArray[0];
        //сдвигаем очередь и затираем первое в  очереди , т.к. оно у нас уже на запуске
    while (((TaskArray[n].pfunc != 0) || (TaskArray[n].countdown!=0)) && (n < MAXnTASKS)){
    15a8:	89 81       	ldd	r24, Y+1	; 0x01
    15aa:	88 2f       	mov	r24, r24
    15ac:	90 e0       	ldi	r25, 0x00	; 0
    15ae:	88 0f       	add	r24, r24
    15b0:	99 1f       	adc	r25, r25
    15b2:	88 0f       	add	r24, r24
    15b4:	99 1f       	adc	r25, r25
    15b6:	83 56       	subi	r24, 0x63	; 99
    15b8:	9f 4f       	sbci	r25, 0xFF	; 255
    15ba:	fc 01       	movw	r30, r24
    15bc:	80 81       	ld	r24, Z
    15be:	91 81       	ldd	r25, Z+1	; 0x01
    15c0:	00 97       	sbiw	r24, 0x00	; 0
    15c2:	71 f4       	brne	.+28     	; 0x15e0 <DispatchTask+0x124>
    15c4:	89 81       	ldd	r24, Y+1	; 0x01
    15c6:	88 2f       	mov	r24, r24
    15c8:	90 e0       	ldi	r25, 0x00	; 0
    15ca:	88 0f       	add	r24, r24
    15cc:	99 1f       	adc	r25, r25
    15ce:	88 0f       	add	r24, r24
    15d0:	99 1f       	adc	r25, r25
    15d2:	81 56       	subi	r24, 0x61	; 97
    15d4:	9f 4f       	sbci	r25, 0xFF	; 255
    15d6:	fc 01       	movw	r30, r24
    15d8:	80 81       	ld	r24, Z
    15da:	91 81       	ldd	r25, Z+1	; 0x01
    15dc:	00 97       	sbiw	r24, 0x00	; 0
    15de:	21 f0       	breq	.+8      	; 0x15e8 <DispatchTask+0x12c>
    15e0:	89 81       	ldd	r24, Y+1	; 0x01
    15e2:	88 30       	cpi	r24, 0x08	; 8
    15e4:	08 f4       	brcc	.+2      	; 0x15e8 <DispatchTask+0x12c>
    15e6:	8c cf       	rjmp	.-232    	; 0x1500 <DispatchTask+0x44>
        n++;
        TaskArray[n-1]=TaskArray[n];        //сдвигаем очередь вперед
        if (TaskArray[n-1].countdown) TaskArray[n-1].countdown-=dt;     //вычитаем прошедшее время из каждой задачи
   }

    if (TaskArray[0].pfunc != 0) {
    15e8:	80 91 9d 00 	lds	r24, 0x009D
    15ec:	90 91 9e 00 	lds	r25, 0x009E
    15f0:	00 97       	sbiw	r24, 0x00	; 0
    15f2:	81 f0       	breq	.+32     	; 0x1614 <DispatchTask+0x158>
            delay_time=TaskArray[0].countdown;
    15f4:	80 91 9f 00 	lds	r24, 0x009F
    15f8:	90 91 a0 00 	lds	r25, 0x00A0
    15fc:	90 93 9c 00 	sts	0x009C, r25
    1600:	80 93 9b 00 	sts	0x009B, r24
            dt=delay_time;
    1604:	80 91 9b 00 	lds	r24, 0x009B
    1608:	90 91 9c 00 	lds	r25, 0x009C
    160c:	90 93 be 00 	sts	0x00BE, r25
    1610:	80 93 bd 00 	sts	0x00BD, r24
    }
    if (*tmp.pfunc!=0)(*tmp.pfunc)();
    1614:	8a 81       	ldd	r24, Y+2	; 0x02
    1616:	9b 81       	ldd	r25, Y+3	; 0x03
    1618:	00 97       	sbiw	r24, 0x00	; 0
    161a:	21 f0       	breq	.+8      	; 0x1624 <DispatchTask+0x168>
    161c:	8a 81       	ldd	r24, Y+2	; 0x02
    161e:	9b 81       	ldd	r25, Y+3	; 0x03
    1620:	fc 01       	movw	r30, r24
    1622:	09 95       	icall
    flags.RunFlag=0;
    1624:	80 91 92 00 	lds	r24, 0x0092
    1628:	8e 7f       	andi	r24, 0xFE	; 254
    162a:	80 93 92 00 	sts	0x0092, r24
   }
}
    162e:	0f 90       	pop	r0
    1630:	0f 90       	pop	r0
    1632:	0f 90       	pop	r0
    1634:	0f 90       	pop	r0
    1636:	0f 90       	pop	r0
    1638:	df 91       	pop	r29
    163a:	cf 91       	pop	r28
    163c:	08 95       	ret

0000163e <DeleteTask>:

void DeleteTask (uint8_t j)
{
    163e:	cf 93       	push	r28
    1640:	df 93       	push	r29
    1642:	1f 92       	push	r1
    1644:	cd b7       	in	r28, 0x3d	; 61
    1646:	de b7       	in	r29, 0x3e	; 62
    1648:	89 83       	std	Y+1, r24	; 0x01
   TaskArray[j].pfunc = 0x0000;
    164a:	89 81       	ldd	r24, Y+1	; 0x01
    164c:	88 2f       	mov	r24, r24
    164e:	90 e0       	ldi	r25, 0x00	; 0
    1650:	88 0f       	add	r24, r24
    1652:	99 1f       	adc	r25, r25
    1654:	88 0f       	add	r24, r24
    1656:	99 1f       	adc	r25, r25
    1658:	83 56       	subi	r24, 0x63	; 99
    165a:	9f 4f       	sbci	r25, 0xFF	; 255
    165c:	fc 01       	movw	r30, r24
    165e:	11 82       	std	Z+1, r1	; 0x01
    1660:	10 82       	st	Z, r1
   TaskArray[j].countdown=0;
    1662:	89 81       	ldd	r24, Y+1	; 0x01
    1664:	88 2f       	mov	r24, r24
    1666:	90 e0       	ldi	r25, 0x00	; 0
    1668:	88 0f       	add	r24, r24
    166a:	99 1f       	adc	r25, r25
    166c:	88 0f       	add	r24, r24
    166e:	99 1f       	adc	r25, r25
    1670:	81 56       	subi	r24, 0x61	; 97
    1672:	9f 4f       	sbci	r25, 0xFF	; 255
    1674:	fc 01       	movw	r30, r24
    1676:	11 82       	std	Z+1, r1	; 0x01
    1678:	10 82       	st	Z, r1
//   TaskArray[j].delay = 0;
//    usartWrite('S');
}
    167a:	0f 90       	pop	r0
    167c:	df 91       	pop	r29
    167e:	cf 91       	pop	r28
    1680:	08 95       	ret

00001682 <__vector_4>:
void Idle(){

}
#endif

ISR(TIMER2_OVF_vect){
    1682:	1f 92       	push	r1
    1684:	0f 92       	push	r0
    1686:	00 90 5f 00 	lds	r0, 0x005F
    168a:	0f 92       	push	r0
    168c:	11 24       	eor	r1, r1
    168e:	2f 93       	push	r18
    1690:	8f 93       	push	r24
    1692:	9f 93       	push	r25
    1694:	ef 93       	push	r30
    1696:	ff 93       	push	r31
    1698:	cf 93       	push	r28
    169a:	df 93       	push	r29
    169c:	cd b7       	in	r28, 0x3d	; 61
    169e:	de b7       	in	r29, 0x3e	; 62
  //  timer2++;
   TCNT2 = StartFrom;
    16a0:	84 e4       	ldi	r24, 0x44	; 68
    16a2:	90 e0       	ldi	r25, 0x00	; 0
    16a4:	23 ed       	ldi	r18, 0xD3	; 211
    16a6:	fc 01       	movw	r30, r24
    16a8:	20 83       	st	Z, r18
   if (flags.RunFlag==0&&delay_time!=0)delay_time--;
    16aa:	80 91 92 00 	lds	r24, 0x0092
    16ae:	98 2f       	mov	r25, r24
    16b0:	91 70       	andi	r25, 0x01	; 1
    16b2:	81 e0       	ldi	r24, 0x01	; 1
    16b4:	89 27       	eor	r24, r25
    16b6:	88 23       	and	r24, r24
    16b8:	79 f0       	breq	.+30     	; 0x16d8 <__vector_4+0x56>
    16ba:	80 91 9b 00 	lds	r24, 0x009B
    16be:	90 91 9c 00 	lds	r25, 0x009C
    16c2:	00 97       	sbiw	r24, 0x00	; 0
    16c4:	49 f0       	breq	.+18     	; 0x16d8 <__vector_4+0x56>
    16c6:	80 91 9b 00 	lds	r24, 0x009B
    16ca:	90 91 9c 00 	lds	r25, 0x009C
    16ce:	01 97       	sbiw	r24, 0x01	; 1
    16d0:	90 93 9c 00 	sts	0x009C, r25
    16d4:	80 93 9b 00 	sts	0x009B, r24
   if (delay_time==0)flags.RunFlag=1;
    16d8:	80 91 9b 00 	lds	r24, 0x009B
    16dc:	90 91 9c 00 	lds	r25, 0x009C
    16e0:	00 97       	sbiw	r24, 0x00	; 0
    16e2:	29 f4       	brne	.+10     	; 0x16ee <__vector_4+0x6c>
    16e4:	80 91 92 00 	lds	r24, 0x0092
    16e8:	81 60       	ori	r24, 0x01	; 1
    16ea:	80 93 92 00 	sts	0x0092, r24
}
    16ee:	df 91       	pop	r29
    16f0:	cf 91       	pop	r28
    16f2:	ff 91       	pop	r31
    16f4:	ef 91       	pop	r30
    16f6:	9f 91       	pop	r25
    16f8:	8f 91       	pop	r24
    16fa:	2f 91       	pop	r18
    16fc:	0f 90       	pop	r0
    16fe:	00 92 5f 00 	sts	0x005F, r0
    1702:	0f 90       	pop	r0
    1704:	1f 90       	pop	r1
    1706:	18 95       	reti

00001708 <InitScheduler>:

void InitScheduler (void){
    1708:	cf 93       	push	r28
    170a:	df 93       	push	r29
    170c:	cd b7       	in	r28, 0x3d	; 61
    170e:	de b7       	in	r29, 0x3e	; 62
//   uint8_t i;
   TCCR2 |= (1<<CS02)|(0<<CS01)|(0<<CS00);   // устанавливаем прескалер - 1024(101) 256(100) 64(011) 8(010) 0(001) off(000)
    1710:	85 e4       	ldi	r24, 0x45	; 69
    1712:	90 e0       	ldi	r25, 0x00	; 0
    1714:	25 e4       	ldi	r18, 0x45	; 69
    1716:	30 e0       	ldi	r19, 0x00	; 0
    1718:	f9 01       	movw	r30, r18
    171a:	20 81       	ld	r18, Z
    171c:	24 60       	ori	r18, 0x04	; 4
    171e:	fc 01       	movw	r30, r24
    1720:	20 83       	st	Z, r18
   TIFR = 1<<TOV0;   // очищаем флаг прерывания таймера Т0
    1722:	88 e5       	ldi	r24, 0x58	; 88
    1724:	90 e0       	ldi	r25, 0x00	; 0
    1726:	21 e0       	ldi	r18, 0x01	; 1
    1728:	fc 01       	movw	r30, r24
    172a:	20 83       	st	Z, r18
   TIMSK |= 1<<TOIE2;   // разрешаем прерывание по переполнению
    172c:	89 e5       	ldi	r24, 0x59	; 89
    172e:	90 e0       	ldi	r25, 0x00	; 0
    1730:	29 e5       	ldi	r18, 0x59	; 89
    1732:	30 e0       	ldi	r19, 0x00	; 0
    1734:	f9 01       	movw	r30, r18
    1736:	20 81       	ld	r18, Z
    1738:	20 64       	ori	r18, 0x40	; 64
    173a:	fc 01       	movw	r30, r24
    173c:	20 83       	st	Z, r18
   TCNT2 = StartFrom;    // загружаем начальное зн. в счетный регистр
    173e:	84 e4       	ldi	r24, 0x44	; 68
    1740:	90 e0       	ldi	r25, 0x00	; 0
    1742:	23 ed       	ldi	r18, 0xD3	; 211
    1744:	fc 01       	movw	r30, r24
    1746:	20 83       	st	Z, r18
//   for (i=0; i<MAXnTASKS; i++) DeleteTask(i);   // очищаем массив задач
}
    1748:	df 91       	pop	r29
    174a:	cf 91       	pop	r28
    174c:	08 95       	ret

0000174e <__vector_8>:

#include "timer.h"


ISR( TIMER1_OVF_vect )  //на осциллограффе в протеусе ровно 1 сек ^^
{
    174e:	1f 92       	push	r1
    1750:	0f 92       	push	r0
    1752:	00 90 5f 00 	lds	r0, 0x005F
    1756:	0f 92       	push	r0
    1758:	11 24       	eor	r1, r1
    175a:	2f 93       	push	r18
    175c:	3f 93       	push	r19
    175e:	8f 93       	push	r24
    1760:	9f 93       	push	r25
    1762:	ef 93       	push	r30
    1764:	ff 93       	push	r31
    1766:	cf 93       	push	r28
    1768:	df 93       	push	r29
    176a:	cd b7       	in	r28, 0x3d	; 61
    176c:	de b7       	in	r29, 0x3e	; 62
	TCNT1=57724;
    176e:	8c e4       	ldi	r24, 0x4C	; 76
    1770:	90 e0       	ldi	r25, 0x00	; 0
    1772:	2c e7       	ldi	r18, 0x7C	; 124
    1774:	31 ee       	ldi	r19, 0xE1	; 225
    1776:	fc 01       	movw	r30, r24
    1778:	31 83       	std	Z+1, r19	; 0x01
    177a:	20 83       	st	Z, r18
    if (flags.SupplyAuto==1)flags.TimerFlag=1;
    177c:	80 91 91 00 	lds	r24, 0x0091
    1780:	82 95       	swap	r24
    1782:	81 70       	andi	r24, 0x01	; 1
    1784:	88 23       	and	r24, r24
    1786:	29 f0       	breq	.+10     	; 0x1792 <__vector_8+0x44>
    1788:	80 91 91 00 	lds	r24, 0x0091
    178c:	80 62       	ori	r24, 0x20	; 32
    178e:	80 93 91 00 	sts	0x0091, r24
}
    1792:	df 91       	pop	r29
    1794:	cf 91       	pop	r28
    1796:	ff 91       	pop	r31
    1798:	ef 91       	pop	r30
    179a:	9f 91       	pop	r25
    179c:	8f 91       	pop	r24
    179e:	3f 91       	pop	r19
    17a0:	2f 91       	pop	r18
    17a2:	0f 90       	pop	r0
    17a4:	00 92 5f 00 	sts	0x005F, r0
    17a8:	0f 90       	pop	r0
    17aa:	1f 90       	pop	r1
    17ac:	18 95       	reti

000017ae <doubleCountdown>:

void doubleCountdown(){
    17ae:	cf 93       	push	r28
    17b0:	df 93       	push	r29
    17b2:	cd b7       	in	r28, 0x3d	; 61
    17b4:	de b7       	in	r29, 0x3e	; 62
if (flags.TimerFlag==1){
    17b6:	80 91 91 00 	lds	r24, 0x0091
    17ba:	85 fb       	bst	r24, 5
    17bc:	88 27       	eor	r24, r24
    17be:	80 f9       	bld	r24, 0
    17c0:	88 23       	and	r24, r24
    17c2:	09 f4       	brne	.+2      	; 0x17c6 <doubleCountdown+0x18>
    17c4:	80 c0       	rjmp	.+256    	; 0x18c6 <doubleCountdown+0x118>
    if (flags.SupplyAuto==1){   //отправить в диспетчер наверное ... можно даже при хорошей настройке диспетчера
    17c6:	80 91 91 00 	lds	r24, 0x0091
    17ca:	82 95       	swap	r24
    17cc:	81 70       	andi	r24, 0x01	; 1
    17ce:	88 23       	and	r24, r24
    17d0:	09 f4       	brne	.+2      	; 0x17d4 <doubleCountdown+0x26>
    17d2:	58 c0       	rjmp	.+176    	; 0x1884 <doubleCountdown+0xd6>
        if (CurrentTime!=0){        //отключить этот таймер
    17d4:	80 91 84 00 	lds	r24, 0x0084
    17d8:	90 91 85 00 	lds	r25, 0x0085
    17dc:	00 97       	sbiw	r24, 0x00	; 0
    17de:	51 f0       	breq	.+20     	; 0x17f4 <doubleCountdown+0x46>
                CurrentTime--;
    17e0:	80 91 84 00 	lds	r24, 0x0084
    17e4:	90 91 85 00 	lds	r25, 0x0085
    17e8:	01 97       	sbiw	r24, 0x01	; 1
    17ea:	90 93 85 00 	sts	0x0085, r25
    17ee:	80 93 84 00 	sts	0x0084, r24
    17f2:	48 c0       	rjmp	.+144    	; 0x1884 <doubleCountdown+0xd6>
            }
            else{
                if (flags.ADC_Channel==0){
    17f4:	80 91 91 00 	lds	r24, 0x0091
    17f8:	86 fb       	bst	r24, 6
    17fa:	99 27       	eor	r25, r25
    17fc:	90 f9       	bld	r25, 0
    17fe:	81 e0       	ldi	r24, 0x01	; 1
    1800:	89 27       	eor	r24, r25
    1802:	88 23       	and	r24, r24
    1804:	01 f1       	breq	.+64     	; 0x1846 <doubleCountdown+0x98>
                    CurrentTime=adc6;
    1806:	80 91 88 00 	lds	r24, 0x0088
    180a:	90 91 89 00 	lds	r25, 0x0089
    180e:	90 93 85 00 	sts	0x0085, r25
    1812:	80 93 84 00 	sts	0x0084, r24
                    TimeSupply=CurrentTime+1;
    1816:	80 91 84 00 	lds	r24, 0x0084
    181a:	90 91 85 00 	lds	r25, 0x0085
    181e:	01 96       	adiw	r24, 0x01	; 1
    1820:	90 93 83 00 	sts	0x0083, r25
    1824:	80 93 82 00 	sts	0x0082, r24
                    flags.ADC_Channel=1;
    1828:	80 91 91 00 	lds	r24, 0x0091
    182c:	80 64       	ori	r24, 0x40	; 64
    182e:	80 93 91 00 	sts	0x0091, r24
                    SB(C,3);
    1832:	85 e3       	ldi	r24, 0x35	; 53
    1834:	90 e0       	ldi	r25, 0x00	; 0
    1836:	25 e3       	ldi	r18, 0x35	; 53
    1838:	30 e0       	ldi	r19, 0x00	; 0
    183a:	f9 01       	movw	r30, r18
    183c:	20 81       	ld	r18, Z
    183e:	28 60       	ori	r18, 0x08	; 8
    1840:	fc 01       	movw	r30, r24
    1842:	20 83       	st	Z, r18
    1844:	1f c0       	rjmp	.+62     	; 0x1884 <doubleCountdown+0xd6>
                    }
                    else{
                    CurrentTime=adc7;
    1846:	80 91 8a 00 	lds	r24, 0x008A
    184a:	90 91 8b 00 	lds	r25, 0x008B
    184e:	90 93 85 00 	sts	0x0085, r25
    1852:	80 93 84 00 	sts	0x0084, r24
                    TimeStop=CurrentTime+1;
    1856:	80 91 84 00 	lds	r24, 0x0084
    185a:	90 91 85 00 	lds	r25, 0x0085
    185e:	01 96       	adiw	r24, 0x01	; 1
    1860:	90 93 81 00 	sts	0x0081, r25
    1864:	80 93 80 00 	sts	0x0080, r24
                    flags.ADC_Channel=0;
    1868:	80 91 91 00 	lds	r24, 0x0091
    186c:	8f 7b       	andi	r24, 0xBF	; 191
    186e:	80 93 91 00 	sts	0x0091, r24
                    CB(C,3);
    1872:	85 e3       	ldi	r24, 0x35	; 53
    1874:	90 e0       	ldi	r25, 0x00	; 0
    1876:	25 e3       	ldi	r18, 0x35	; 53
    1878:	30 e0       	ldi	r19, 0x00	; 0
    187a:	f9 01       	movw	r30, r18
    187c:	20 81       	ld	r18, Z
    187e:	27 7f       	andi	r18, 0xF7	; 247
    1880:	fc 01       	movw	r30, r24
    1882:	20 83       	st	Z, r18
            }
        }
    }
    flags.TimerFlag=0;
    1884:	80 91 91 00 	lds	r24, 0x0091
    1888:	8f 7d       	andi	r24, 0xDF	; 223
    188a:	80 93 91 00 	sts	0x0091, r24

    if (flags.ADC_Channel==0) {TimeStop--;}
    188e:	80 91 91 00 	lds	r24, 0x0091
    1892:	86 fb       	bst	r24, 6
    1894:	99 27       	eor	r25, r25
    1896:	90 f9       	bld	r25, 0
    1898:	81 e0       	ldi	r24, 0x01	; 1
    189a:	89 27       	eor	r24, r25
    189c:	88 23       	and	r24, r24
    189e:	51 f0       	breq	.+20     	; 0x18b4 <doubleCountdown+0x106>
    18a0:	80 91 80 00 	lds	r24, 0x0080
    18a4:	90 91 81 00 	lds	r25, 0x0081
    18a8:	01 97       	sbiw	r24, 0x01	; 1
    18aa:	90 93 81 00 	sts	0x0081, r25
    18ae:	80 93 80 00 	sts	0x0080, r24
    18b2:	09 c0       	rjmp	.+18     	; 0x18c6 <doubleCountdown+0x118>
        else {TimeSupply--;}
    18b4:	80 91 82 00 	lds	r24, 0x0082
    18b8:	90 91 83 00 	lds	r25, 0x0083
    18bc:	01 97       	sbiw	r24, 0x01	; 1
    18be:	90 93 83 00 	sts	0x0083, r25
    18c2:	80 93 82 00 	sts	0x0082, r24

    }
//*/

    AddTask(doubleCountdown,100);
    18c6:	64 e6       	ldi	r22, 0x64	; 100
    18c8:	70 e0       	ldi	r23, 0x00	; 0
    18ca:	87 ed       	ldi	r24, 0xD7	; 215
    18cc:	9b e0       	ldi	r25, 0x0B	; 11
    18ce:	6c dc       	rcall	.-1832   	; 0x11a8 <AddTask>
}
    18d0:	df 91       	pop	r29
    18d2:	cf 91       	pop	r28
    18d4:	08 95       	ret

000018d6 <InitTimer>:
void InitTimer(){
    18d6:	cf 93       	push	r28
    18d8:	df 93       	push	r29
    18da:	cd b7       	in	r28, 0x3d	; 61
    18dc:	de b7       	in	r29, 0x3e	; 62

  TIMSK = (1<<TOIE0)|(1<<TOIE1)|(1<<TOIE2); // переполнение
    18de:	89 e5       	ldi	r24, 0x59	; 89
    18e0:	90 e0       	ldi	r25, 0x00	; 0
    18e2:	25 e4       	ldi	r18, 0x45	; 69
    18e4:	fc 01       	movw	r30, r24
    18e6:	20 83       	st	Z, r18
  TCCR0 = (1<<CS02)|(0<<CS01)|(1<<CS00); // предделитель 1024
    18e8:	83 e5       	ldi	r24, 0x53	; 83
    18ea:	90 e0       	ldi	r25, 0x00	; 0
    18ec:	25 e0       	ldi	r18, 0x05	; 5
    18ee:	fc 01       	movw	r30, r24
    18f0:	20 83       	st	Z, r18
  TCNT0 = TCNT0_const;
    18f2:	82 e5       	ldi	r24, 0x52	; 82
    18f4:	90 e0       	ldi	r25, 0x00	; 0
    18f6:	29 ed       	ldi	r18, 0xD9	; 217
    18f8:	fc 01       	movw	r30, r24
    18fa:	20 83       	st	Z, r18
  TCCR2 = (1<<CS02)|(0<<CS01)|(1<<CS00);
    18fc:	85 e4       	ldi	r24, 0x45	; 69
    18fe:	90 e0       	ldi	r25, 0x00	; 0
    1900:	25 e0       	ldi	r18, 0x05	; 5
    1902:	fc 01       	movw	r30, r24
    1904:	20 83       	st	Z, r18
	TCCR1B = (1<<CS12)|(0<<CS11)|(1<<CS10); // настраиваем делитель 100=256 101=1024
    1906:	8e e4       	ldi	r24, 0x4E	; 78
    1908:	90 e0       	ldi	r25, 0x00	; 0
    190a:	25 e0       	ldi	r18, 0x05	; 5
    190c:	fc 01       	movw	r30, r24
    190e:	20 83       	st	Z, r18
//	TIMSK = (1<<TOIE1); // разрешаем прерывание по переполнению таймера 1 // перенесено в главный файл
	TCNT1 = 57724;        // выставляем начальное значение TCNT1 64456 57724
    1910:	8c e4       	ldi	r24, 0x4C	; 76
    1912:	90 e0       	ldi	r25, 0x00	; 0
    1914:	2c e7       	ldi	r18, 0x7C	; 124
    1916:	31 ee       	ldi	r19, 0xE1	; 225
    1918:	fc 01       	movw	r30, r24
    191a:	31 83       	std	Z+1, r19	; 0x01
    191c:	20 83       	st	Z, r18
	  // TIFR = 1<<TOV1;
}
    191e:	df 91       	pop	r29
    1920:	cf 91       	pop	r28
    1922:	08 95       	ret

00001924 <__vector_9>:

ISR(TIMER0_OVF_vect) // на осциллографе в протеусе 10мс (10kHz)
{
    1924:	1f 92       	push	r1
    1926:	0f 92       	push	r0
    1928:	00 90 5f 00 	lds	r0, 0x005F
    192c:	0f 92       	push	r0
    192e:	11 24       	eor	r1, r1
    1930:	2f 93       	push	r18
    1932:	8f 93       	push	r24
    1934:	9f 93       	push	r25
    1936:	ef 93       	push	r30
    1938:	ff 93       	push	r31
    193a:	cf 93       	push	r28
    193c:	df 93       	push	r29
    193e:	cd b7       	in	r28, 0x3d	; 61
    1940:	de b7       	in	r29, 0x3e	; 62
  TCNT0 = TCNT0_const;  //7812   217  //8000000/1024
    1942:	82 e5       	ldi	r24, 0x52	; 82
    1944:	90 e0       	ldi	r25, 0x00	; 0
    1946:	29 ed       	ldi	r18, 0xD9	; 217
    1948:	fc 01       	movw	r30, r24
    194a:	20 83       	st	Z, r18
 // IND_Update(); // (CH(C,4))?CB(C,4):SB(C,4);// на осциллографе в протеусе 10мс(100гц),теперь восемь оО
}
    194c:	df 91       	pop	r29
    194e:	cf 91       	pop	r28
    1950:	ff 91       	pop	r31
    1952:	ef 91       	pop	r30
    1954:	9f 91       	pop	r25
    1956:	8f 91       	pop	r24
    1958:	2f 91       	pop	r18
    195a:	0f 90       	pop	r0
    195c:	00 92 5f 00 	sts	0x005F, r0
    1960:	0f 90       	pop	r0
    1962:	1f 90       	pop	r1
    1964:	18 95       	reti

00001966 <__umulhisi3>:
    1966:	a2 9f       	mul	r26, r18
    1968:	b0 01       	movw	r22, r0
    196a:	b3 9f       	mul	r27, r19
    196c:	c0 01       	movw	r24, r0
    196e:	a3 9f       	mul	r26, r19
    1970:	01 d0       	rcall	.+2      	; 0x1974 <__umulhisi3+0xe>
    1972:	b2 9f       	mul	r27, r18
    1974:	70 0d       	add	r23, r0
    1976:	81 1d       	adc	r24, r1
    1978:	11 24       	eor	r1, r1
    197a:	91 1d       	adc	r25, r1
    197c:	08 95       	ret

0000197e <__udivmodhi4>:
    197e:	aa 1b       	sub	r26, r26
    1980:	bb 1b       	sub	r27, r27
    1982:	51 e1       	ldi	r21, 0x11	; 17
    1984:	07 c0       	rjmp	.+14     	; 0x1994 <__udivmodhi4_ep>

00001986 <__udivmodhi4_loop>:
    1986:	aa 1f       	adc	r26, r26
    1988:	bb 1f       	adc	r27, r27
    198a:	a6 17       	cp	r26, r22
    198c:	b7 07       	cpc	r27, r23
    198e:	10 f0       	brcs	.+4      	; 0x1994 <__udivmodhi4_ep>
    1990:	a6 1b       	sub	r26, r22
    1992:	b7 0b       	sbc	r27, r23

00001994 <__udivmodhi4_ep>:
    1994:	88 1f       	adc	r24, r24
    1996:	99 1f       	adc	r25, r25
    1998:	5a 95       	dec	r21
    199a:	a9 f7       	brne	.-22     	; 0x1986 <__udivmodhi4_loop>
    199c:	80 95       	com	r24
    199e:	90 95       	com	r25
    19a0:	bc 01       	movw	r22, r24
    19a2:	cd 01       	movw	r24, r26
    19a4:	08 95       	ret

000019a6 <strlen>:
    19a6:	fc 01       	movw	r30, r24
    19a8:	01 90       	ld	r0, Z+
    19aa:	00 20       	and	r0, r0
    19ac:	e9 f7       	brne	.-6      	; 0x19a8 <strlen+0x2>
    19ae:	80 95       	com	r24
    19b0:	90 95       	com	r25
    19b2:	8e 0f       	add	r24, r30
    19b4:	9f 1f       	adc	r25, r31
    19b6:	08 95       	ret

000019b8 <_exit>:
    19b8:	f8 94       	cli

000019ba <__stop_program>:
    19ba:	ff cf       	rjmp	.-2      	; 0x19ba <__stop_program>
